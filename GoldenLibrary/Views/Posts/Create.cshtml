@model PostCreateViewModel
@{
    ViewData["Title"] = "Write Your Story";
}

<div class="editor-container">    <!-- Top Navigation Bar -->    
    <div class="editor-navbar">
        <div class="editor-left">
            <div class="logo-area">
                <a href="/" class="editor-logo">
                    <span>GoldenLibrary</span>
                </a>
            </div>
        </div>
        
        <div class="editor-center">
            <div class="editor-stats">
                <span id="wordCount">0 words</span>
                <span class="separator">•</span>
                <span id="readingTime">0 min read</span>
            </div>
        </div>
        
        <div class="editor-actions">
            <div class="save-indicator" id="saveStatus">
                <span class="save-dot"></span>
                <span class="save-text">Saved</span>
            </div>
            <button class="btn btn-link text-muted btn-sm" id="saveAsDraftBtn">Save draft</button>
            <button class="btn btn-success btn-sm" id="publishBtn">Publish</button>
            <button class="btn btn-link text-muted" id="settingsBtn" title="Settings">
                <i class="bi bi-three-dots"></i>
            </button>
        </div>
    </div>
      <!-- Simplified Minimalist Formatting Toolbar -->
    <div class="formatting-toolbar" id="formattingToolbar">
        <div class="toolbar-buttons">
            <button type="button" class="toolbar-button" data-command="bold" title="Bold (Ctrl+B)">
                <strong>B</strong>
            </button>
            <button type="button" class="toolbar-button" data-command="italic" title="Italic (Ctrl+I)">
                <em>I</em>
            </button>
            <div class="toolbar-separator"></div>
            <button type="button" class="toolbar-button" data-command="link" title="Link (Ctrl+K)">
                <i class="bi bi-link-45deg"></i>
            </button>
            <div class="toolbar-separator"></div>
            <button type="button" class="toolbar-button toolbar-button-text" data-command="h2" title="Heading">
                T
            </button>
            <button type="button" class="toolbar-button" data-command="quote" title="Quote">
                <i class="bi bi-quote"></i>
            </button>
            <button type="button" class="toolbar-button" data-command="inlineCode" title="Code">
                <i class="bi bi-code"></i>
            </button>
            <div class="toolbar-separator"></div>
            <button type="button" class="toolbar-button" data-command="highlight" title="Highlight">
                <i class="bi bi-brush"></i>
            </button>
        </div>
        
        <!-- Link Input Form (initially hidden) -->
        <div class="link-form" id="linkForm">
            <input type="url" id="linkInput" placeholder="Paste or type a link..." autocomplete="off" />
            <button type="button" id="applyLinkButton" class="link-apply-btn">Apply</button>
            <button type="button" id="cancelLinkButton" class="link-cancel-btn">×</button>
        </div>
        
        <!-- Highlight color picker -->
        <div class="highlight-color-picker" id="highlightColorPicker">
            <div class="color-options">
                <button type="button" class="color-option" data-color="yellow" style="background-color: #ffeb3b;"></button>
                <button type="button" class="color-option" data-color="green" style="background-color: #4caf50;"></button>
                <button type="button" class="color-option" data-color="blue" style="background-color: #2196f3;"></button>
                <button type="button" class="color-option" data-color="pink" style="background-color: #e91e63;"></button>
                <button type="button" class="color-option" data-command="removeHighlight" title="Remove">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        </div>
    </div>
      <!-- Content Addition Button -->
    <div class="content-add-button" id="contentAddButton">
        <button class="add-button-trigger" title="Add content">
            <i class="bi bi-plus-lg"></i>
        </button>
        <div class="add-button-menu">
            <div class="add-menu-header">
                <span>Add to story</span>
            </div>
            <div class="add-menu-items">
                <button class="add-menu-item" data-content-type="image" title="Upload an image">
                    <div class="add-menu-icon">
                        <i class="bi bi-image"></i>
                    </div>
                    <div class="add-menu-text">
                        <span class="add-menu-title">Image</span>
                        <span class="add-menu-desc">Upload from computer</span>
                    </div>
                </button>
                <button class="add-menu-item" data-content-type="divider" title="Add a divider">
                    <div class="add-menu-icon">
                        <i class="bi bi-three-dots"></i>
                    </div>
                    <div class="add-menu-text">
                        <span class="add-menu-title">Divider</span>
                        <span class="add-menu-desc">Add a section break</span>
                    </div>
                </button>
                <button class="add-menu-item" data-content-type="embed" title="Embed content">
                    <div class="add-menu-icon">
                        <i class="bi bi-code-slash"></i>
                    </div>
                    <div class="add-menu-text">
                        <span class="add-menu-title">Embed</span>
                        <span class="add-menu-desc">Add any embed code</span>
                    </div>
                </button>
            </div>
        </div>
    </div>
      <!-- Media Upload Dialog -->
    <div class="media-dialog" id="mediaDialog">
        <div class="media-dialog-content">
            <div class="media-dialog-header">
                <h5 id="mediaDialogTitle">Add Media</h5>
                <button type="button" class="close-dialog" id="closeMediaDialog">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <div class="media-dialog-body">
                <!-- Media Dialog Tabs -->
                <ul class="nav nav-tabs mb-3" id="mediaDialogTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="upload-tab" data-bs-toggle="tab" data-bs-target="#imageUploadPane" 
                                type="button" role="tab" aria-selected="true">Upload</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="unsplash-tab" data-bs-toggle="tab" data-bs-target="#unsplashPane" 
                                type="button" role="tab" aria-selected="false">Unsplash</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="gallery-tab" data-bs-toggle="tab" data-bs-target="#galleryPane" 
                                type="button" role="tab" aria-selected="false">Gallery</button>
                    </li>
                </ul>
                
                <!-- Image Upload Pane -->
                <div id="imageUploadPane" class="media-pane tab-pane fade show active">
                    <div class="upload-area" id="imageDropArea">
                        <input type="file" id="imageFileInput" accept="image/*" style="display: none;" multiple />
                        <i class="bi bi-cloud-arrow-up"></i>
                        <h5>Drag and drop an image</h5>
                        <p>or click here to upload</p>
                    </div>
                    <div class="mt-3">
                        <p class="text-muted">Or insert from URL:</p>
                        <div class="input-group">
                            <input type="text" id="imageUrlInput" class="form-control" placeholder="Paste image URL..." />
                            <button class="btn btn-golden" id="insertImageUrlBtn">Insert</button>
                        </div>
                    </div>
                    
                    <!-- Image Options (Only visible when an image is selected/uploaded) -->
                    <div class="image-options mt-4" id="imageOptions" style="display: none;">
                        <div class="card">
                            <div class="card-body">
                                <h6>Image Options</h6>
                                
                                <div class="mb-3">
                                    <label class="form-label">Alignment</label>
                                    <div class="btn-group w-100" role="group">
                                        <button type="button" class="btn btn-outline-secondary btn-sm" data-align="left">
                                            <i class="bi bi-text-left"></i> Left
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary btn-sm active" data-align="center">
                                            <i class="bi bi-text-center"></i> Center
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary btn-sm" data-align="right">
                                            <i class="bi bi-text-right"></i> Right
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="imageCaptionInput" class="form-label">Caption (optional)</label>
                                    <input type="text" id="imageCaptionInput" class="form-control" placeholder="Add a caption..." />
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label d-flex justify-content-between">
                                        <span>Size</span>
                                        <span id="imageSize" class="text-muted small">100%</span>
                                    </label>
                                    <input type="range" class="form-range" id="imageSizeRange" min="25" max="100" step="5" value="100" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Unsplash Search Pane -->
                <div id="unsplashPane" class="media-pane tab-pane fade">
                    <div class="mb-3">
                        <label for="unsplashSearchInput" class="form-label">Search for images on Unsplash</label>
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" id="unsplashSearchInput" placeholder="Search photos..." />
                            <button class="btn btn-golden" type="button" id="unsplashSearchBtn">Search</button>
                        </div>
                    </div>
                    
                    <div id="unsplashResults" class="unsplash-results">
                        <div class="text-center text-muted my-5">
                            <i class="bi bi-search" style="font-size: 2rem;"></i>
                            <p class="mt-3">Search for stunning photos from Unsplash</p>
                        </div>
                    </div>
                    
                    <div id="unsplashLoading" class="text-center" style="display: none;">
                        <div class="spinner-border text-golden" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    
                    <div id="unsplashPagination" class="d-flex justify-content-between mt-3" style="display: none;">
                        <button type="button" class="btn btn-outline-secondary" id="unsplashPrevBtn" disabled>Previous</button>
                        <span class="align-self-center" id="unsplashPageInfo">Page 1</span>
                        <button type="button" class="btn btn-outline-secondary" id="unsplashNextBtn">Next</button>
                    </div>
                    
                    <div class="text-center text-muted small mt-3">
                        <span>Photos provided by <a href="https://unsplash.com" target="_blank" rel="nofollow">Unsplash</a></span>
                    </div>
                </div>
                
                <!-- Gallery/Slideshow Pane -->
                <div id="galleryPane" class="media-pane tab-pane fade">
                    <div class="mb-3">
                        <label class="form-label">Create Image Gallery</label>
                        <p class="text-muted small">Upload multiple images to create a gallery</p>
                        
                        <div class="upload-area" id="galleryDropArea">
                            <input type="file" id="galleryFileInput" accept="image/*" multiple style="display: none;" />
                            <i class="bi bi-images"></i>
                            <h5>Drag and drop multiple images</h5>
                            <p>or click here to select images</p>
                        </div>
                    </div>
                    
                    <div class="gallery-images mt-3" id="galleryImagesContainer">
                        <!-- Gallery images will be displayed here -->
                        <div class="text-center text-muted p-4">
                            <p>No images selected yet</p>
                        </div>
                    </div>
                    
                    <div class="gallery-options mt-3" style="display: none;">
                        <div class="card">
                            <div class="card-body">
                                <h6>Gallery Options</h6>
                                
                                <div class="mb-3">
                                    <label class="form-label">Display Style</label>
                                    <select class="form-select" id="galleryStyleSelect">
                                        <option value="grid" selected>Grid</option>
                                        <option value="carousel">Carousel</option>
                                        <option value="slideshow">Slideshow</option>
                                    </select>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">Alignment</label>
                                    <div class="btn-group w-100" role="group">
                                        <button type="button" class="btn btn-outline-secondary btn-sm" data-align="left">
                                            <i class="bi bi-text-left"></i> Left
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary btn-sm active" data-align="center">
                                            <i class="bi bi-text-center"></i> Center
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary btn-sm" data-align="right">
                                            <i class="bi bi-text-right"></i> Right
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="galleryCaption" class="form-label">Gallery Caption (optional)</label>
                                    <input type="text" id="galleryCaption" class="form-control" placeholder="Add a caption for the gallery..." />
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <button class="btn btn-golden w-100" id="insertGalleryBtn" disabled>Insert Gallery</button>
                    </div>
                </div>
                
                <!-- Video Upload Pane -->
                <div id="videoUploadPane" class="media-pane">
                    <div class="mb-3">
                        <label for="videoUrlInput" class="form-label">Enter a YouTube or Vimeo URL:</label>
                        <input type="text" id="videoUrlInput" class="form-control" placeholder="https://www.youtube.com/watch?v=..." />
                    </div>
                    <button class="btn btn-golden" id="insertVideoBtn">Insert Video</button>
                </div>
                
                <!-- Embed Upload Pane -->
                <div id="embedUploadPane" class="media-pane">
                    <div class="mb-3">
                        <label for="embedCodeInput" class="form-label">Paste embed code:</label>
                        <textarea id="embedCodeInput" class="form-control" rows="6" placeholder="<iframe src=..."></textarea>
                    </div>
                    <button class="btn btn-golden" id="insertEmbedBtn">Insert Embed</button>
                </div>
                
                <!-- Code Block Pane -->
                <div id="codeBlockPane" class="media-pane">
                    <div class="mb-3">
                        <label for="codeInput" class="form-label">Enter your code:</label>
                        <textarea id="codeInput" class="form-control" rows="10" placeholder="Write or paste your code here..."></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="codeLanguageSelect" class="form-label">Language (optional):</label>
                        <select id="codeLanguageSelect" class="form-select">
                            <option value="plain">Plain text</option>
                            <option value="javascript">JavaScript</option>
                            <option value="csharp">C#</option>
                            <option value="python">Python</option>
                            <option value="html">HTML</option>
                            <option value="css">CSS</option>
                            <option value="sql">SQL</option>
                            <option value="json">JSON</option>
                            <option value="xml">XML</option>
                        </select>
                    </div>
                    <button class="btn btn-golden" id="insertCodeBtn">Insert Code</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Image Editor Toolbar (appears when clicking on images in the editor) -->
    <div class="image-toolbar" id="imageToolbar">
        <button class="toolbar-button" data-command="align-left" title="Align Left">
            <i class="bi bi-text-left"></i>
        </button>
        <button class="toolbar-button" data-command="align-center" title="Align Center">
            <i class="bi bi-text-center"></i>
        </button>
        <button class="toolbar-button" data-command="align-right" title="Align Right">
            <i class="bi bi-text-right"></i>
        </button>
        <div class="separator"></div>
        <button class="toolbar-button" data-command="edit-caption" title="Edit Caption">
            <i class="bi bi-card-text"></i>
        </button>
        <button class="toolbar-button" data-command="resize-image" title="Resize">
            <i class="bi bi-arrows-angle-expand"></i>
        </button>
        <div class="separator"></div>
        <button class="toolbar-button" data-command="remove-image" title="Remove Image">
            <i class="bi bi-trash"></i>
        </button>
    </div>
    
    <!-- Caption Input (appears when editing image caption) -->
    <div class="caption-input-container" id="captionInputContainer">
        <input type="text" id="captionInput" class="form-control" placeholder="Enter caption..." />
        <div class="caption-buttons">
            <button class="caption-button" id="saveCaptionBtn">Save</button>
            <button class="caption-button" id="cancelCaptionBtn">Cancel</button>
        </div>
    </div>
    
    <!-- Content Editing Area -->
    <div class="editor-content">
        <form id="storyForm" asp-action="Create" method="post">
            <input type="hidden" asp-for="PostId" id="postId" />
            <input type="hidden" id="Title" name="Title" value="@Model?.Title" />
            <input type="hidden" id="Description" name="Description" value="@Model?.Description" />
            <input type="hidden" id="Content" name="Content" value="@Model?.Content" />
            <input type="hidden" id="Url" name="Url" value="@Model?.Url" />
            <input type="hidden" id="Tags" name="Tags" value="@Model?.Tags" />
            <input type="hidden" name="action" id="formAction" value="draft" />
            @Html.AntiForgeryToken()
            
            <div class="title-area">
                <div id="titleEditor" class="editable-title" contenteditable="true" data-placeholder="Title">@Model?.Title</div>
            </div>
            
            <div class="subtitle-area">
                <div id="descriptionEditor" class="editable-subtitle" contenteditable="true" data-placeholder="Add a subtitle or description">@Model?.Description</div>
            </div>
            
            <div class="content-area">
                <div id="contentEditor" class="editable-content" contenteditable="true" data-placeholder="Tell your story...">@Model?.Content</div>
            </div>
            
            <div class="tag-selection-area">
                <h4 class="mb-3">Select Tags for Your Story</h4>
                <div class="tag-cloud">
                    @foreach (var tag in ViewBag.Tags)
                    {
                        <div class="tag-item">
                            <input type="checkbox" id="tag-@tag.TagId" class="tag-checkbox"
                                   name="tagIds" value="@tag.TagId"
                                   @(Model?.Tags != null && Model.Tags.Any(t => t.TagId == tag.TagId) ? "checked" : "")>
                            <label for="tag-@tag.TagId" class="tag-label">
                                <i class="bi bi-tag-fill"></i>
                                @tag.Text
                            </label>
                        </div>
                    }
                </div>
                <div class="tags-hint mt-2">
                    <i class="bi bi-info-circle"></i>
                    <span id="tagValidationMessage">Add at least one tag to publish your story</span>
                </div>
            </div>
        </form>
    </div>
</div>

<style>
    /* Medium-style Clean Typography */
    body {
        background-color: #fff;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        line-height: 1.58;
        letter-spacing: -.003em;
        color: rgba(41, 41, 41, 1);
    }
    
    .editor-container {
        max-width: 680px;
        margin: 0 auto;
        padding: 60px 20px;
        position: relative;
    }
    
    /* Editor Navigation Bar */
    .editor-navbar {
        position: sticky;
        top: 70px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 0;
        margin-bottom: 30px;
        background-color: rgba(255, 255, 255, 0.98);
        border-bottom: 1px solid rgba(0,0,0,0.05);
        z-index: 900;
    }
    
    .editor-stats {
        font-size: 14px;
        color: #6c757d;
    }
    
    .separator {
        margin: 0 8px;
    }
    
    .save-indicator {
        display: flex;
        align-items: center;
        font-size: 14px;
        color: #6c757d;
    }
    
    .save-dot {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: #28a745;
        margin-right: 8px;
    }
    
    .save-indicator.saving .save-dot {
        background-color: #ffc107;
        animation: pulse 1s infinite;
    }
    
    .save-indicator.error .save-dot {
        background-color: #dc3545;
    }
    
    @@keyframes pulse {
        0% { opacity: 0.5; }
        50% { opacity: 1; }
        100% { opacity: 0.5; }
    }
    
    /* Content Editing Area */
    .title-area, .subtitle-area, .content-area {
        margin-bottom: 30px;
    }
    
    /* Contenteditable elements */
    [contenteditable] {
        outline: none;
        cursor: text;
        border: none;
        resize: none;
        overflow: hidden;
        transition: all 0.2s ease;
    }
    
    [contenteditable]:empty:before {
        content: attr(data-placeholder);
        color: #adb5bd;
        position: absolute;
        pointer-events: none;
    }
    
    .editable-title {
        font-family: 'Montserrat', sans-serif;
        font-weight: 700;
        font-size: 45px;
        line-height: 1.2;
        padding: 0;
        margin-bottom: 20px;
        min-height: 60px;
        position: relative;
        width: 100%;
        transition: height 0.2s ease;
    }
    
    .editable-title:empty:before {
        font-size: 45px;
    }
    
    .editable-subtitle {
        font-family: 'Merriweather', serif;
        font-size: 22px;
        color: #6c757d;
        padding: 0;
        margin-bottom: 30px;
        min-height: 40px;
        position: relative;
        width: 100%;
    }
    
    .editable-subtitle:empty:before {
        font-size: 22px;
        color: #adb5bd;
    }
    
    .editable-content {
        font-family: 'Merriweather', serif;
        font-size: 20px;
        line-height: 1.8;
        min-height: 300px;
        padding: 0;
        position: relative;
        width: 100%;
    }
    
    .editable-content:empty:before {
        font-size: 20px;
    }
    
    /* Focus styles - more subtle, minimalistic approach */
    .editable-title:focus, .editable-subtitle:focus, .editable-content:focus {
        border-left: 2px solid #d4af37;
        padding-left: 8px;
        transition: all 0.2s ease;
    }
    
    /* Clean white space around editor content */
    .editor-content {
        background-color: #fff;
        padding: 20px 0;
    }
    
    /* Image upload */
    .image-upload-label {
        display: inline-flex;
        align-items: center;
        padding: 8px 16px;
        border: 1px dashed #d4af37;
        border-radius: 4px;
        color: #6c757d;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .image-upload-label:hover {
        background-color: rgba(212, 175, 55, 0.05);
    }
    
    .image-upload-label i {
        margin-right: 8px;
    }
    
    /* Golden theme button */
    .btn-golden {
        background-color: #d4af37;
        border-color: #d4af37;
        color: white;
    }
    
    .btn-golden:hover {
        background-color: #c39e26;
        border-color: #c39e26;
        color: white;
    }

    /* Hide the save-status div from the old implementation */
    .save-status {
        display: none;
    }
    
    /* Minimalist Formatting Toolbar - Updated Styles */
    .formatting-toolbar {
        position: absolute;
        background: white;
        border-radius: 4px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.1);
        padding: 4px;
        display: flex; /* Changed to flex for multiple internal divs */
        flex-direction: column; /* Stack toolbar items vertically if needed or manage via child divs */
        align-items: flex-start; /* Align items to the start */
        transition: opacity 0.2s ease, transform 0.2s ease;
        opacity: 0;
        transform: translateY(10px) scale(0.95);
        pointer-events: none;
        z-index: 1000;
        border: 1px solid rgba(0,0,0,0.08);
    }
    
    .formatting-toolbar.visible {
        opacity: 1;
        transform: translateY(0) scale(1);
        pointer-events: auto;
    }
    
    .toolbar-buttons {
        display: flex;
        align-items: center;
    }
    
    .toolbar-button {
        background: transparent;
        border: none;
        width: 28px;
        height: 28px;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #495057;
        transition: all 0.15s ease;
        margin: 0 2px;
    }
    
    .toolbar-button:hover {
        background-color: #f8f9fa;
        color: #212529;
    }
    
    .toolbar-button.active {
        background-color: rgba(212, 175, 55, 0.1);
        color: #d4af37;
    }

    /* Inline code style */
    .editable-content code {
        background-color: #f8f9fa;
        padding: 0.2em 0.4em;
        margin: 0;
        font-size: 85%;
        border-radius: 3px;
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
        border: 1px solid #e9ecef;
    }

    /* Highlighted text style using classes */
    .editable-content .highlight-yellow { background-color: yellow; }
    .editable-content .highlight-FFADAD { background-color: #FFADAD; } /* Light Pink */
    .editable-content .highlight-A0E7E5 { background-color: #A0E7E5; } /* Light Blue */
    .editable-content .highlight-FDFFB6 { background-color: #FDFFB6; } /* Light Yellow */
    .editable-content .highlight-B0E0E6 { background-color: #B0E0E6; } /* Powder Blue */
    
    /* Highlight color picker styles */
    .highlight-color-picker {
        display: flex; /* Controlled by JS */
        padding: 4px 6px; /* Add some padding */
        align-items: center;
        background-color: white; /* Ensure it has a background */
        border-top: 1px solid #e9ecef; /* Separator if below buttons */
        margin-top: 4px; /* Space from buttons if stacked */
    }

    .highlight-color-picker .color-option {
        /* Styles already defined inline in HTML for simplicity, can be moved here */
    }
    .highlight-color-picker .color-option:hover {
        border-color: #333;
        transform: scale(1.1);
    }
     .highlight-color-picker .toolbar-button:hover { /* For clear highlight button */
        background-color: #f8f9fa;
        color: #212529;
    }

    /* Blockquote specific styling */
    .editable-content blockquote {
        border-left: 3px solid #d4af37; /* Golden color from theme */
        padding-left: 15px;
        margin-left: 0;
        margin-right: 0;
        color: #6c757d; /* Muted text color */
        font-style: italic;
    }
    
    /* Link Form - Updated for minimalist look */
    .link-form {
        display: none;
        padding: 0 6px;
        align-items: center;
    }
    
    .link-form.visible {
        display: flex;
    }
    
    .link-form input {
        border: none;
        padding: 4px 8px;
        margin-right: 6px;
        min-width: 220px;
        font-size: 14px;
        border-bottom: 1px solid #e9ecef;
    }
    
    .link-form input:focus {
        outline: none;
        border-bottom-color: #d4af37;
    }
    
    .link-form button {
        background: transparent;
        border: none;
        font-size: 13px;
        padding: 3px 6px;
        cursor: pointer;
        border-radius: 4px;
    }
    
    .link-form button:first-of-type {
        color: #d4af37;
        font-weight: 500;
    }
    
    .link-form button:first-of-type:hover {
        background-color: rgba(212, 175, 55, 0.1);
    }
    
    .link-form button:last-of-type:hover {
        background-color: #f8f9fa;
    }
    
    /* Content Addition Button */
    .content-add-button {
        position: absolute;
        left: -50px;
        z-index: 800;
        transition: all 0.3s ease;
    }
    
    .add-button-trigger {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: white;
        border: 1px solid #e9ecef;
        color: #6c757d;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        transition: all 0.2s ease;
    }
    
    .add-button-trigger:hover {
        background-color: #f8f9fa;
        color: #d4af37;
        transform: scale(1.05);
    }
    
    .add-button-trigger i {
        font-size: 18px;
    }
    
    .add-button-menu {
        position: absolute;
        left: 46px;
        top: 0;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        border: 1px solid #e9ecef;
        padding: 8px 0;
        min-width: 160px;
        opacity: 0;
        visibility: hidden;
        transform: translateX(-10px);
        transition: all 0.2s ease;
    }
    
    .content-add-button.open .add-button-menu {
        opacity: 1;
        visibility: visible;
        transform: translateX(0);
    }
    
    .add-menu-item {
        display: flex;
        align-items: center;
        padding: 8px 16px;
        border: none;
        background: none;
        width: 100%;
        text-align: left;
        cursor: pointer;
        transition: background-color 0.15s ease;
    }
    
    .add-menu-item:hover {
        background-color: #f8f9fa;
    }
    
    .add-menu-item i {
        margin-right: 10px;
        color: #d4af37;
        font-size: 16px;
    }
    
    /* Media upload dialog */
    .media-dialog {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1100;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease;
    }
    
    .media-dialog.visible {
        opacity: 1;
        visibility: visible;
    }
    
    .media-dialog-content {
        background-color: white;
        border-radius: 8px;
        max-width: 600px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        transform: translateY(-20px);
        transition: transform 0.3s ease;
    }
    
    .media-dialog.visible .media-dialog-content {
        transform: translateY(0);
    }
    
    .media-dialog-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 20px;
        border-bottom: 1px solid #e9ecef;
    }
    
    .media-dialog-header h5 {
        margin: 0;
        font-weight: 600;
    }
    
    .close-dialog {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        color: #6c757d;
    }
    
    .media-dialog-body {
        padding: 20px;
    }
    
    .media-pane {
        display: none;
    }
    
    .media-pane.active {
        display: block;
    }
    
    .upload-area {
        border: 2px dashed #e9ecef;
        border-radius: 8px;
        padding: 40px 20px;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .upload-area:hover {
        border-color: #d4af37;
        background-color: rgba(212, 175, 55, 0.02);
    }
    
    .upload-area i {
        font-size: 36px;
        color: #d4af37;
        margin-bottom: 10px;
    }
      /* Image Alignment Classes */
    .img-align-left {
        float: left;
        margin: 0 20px 10px 0;
        max-width: 50%;
    }
    
    .img-align-center {
        display: block;
        margin: 20px auto;
        max-width: 100%;
    }
    
    .img-align-right {
        float: right;
        margin: 0 0 10px 20px;
        max-width: 50%;
    }
    
    /* Media Dialog Tabs */
    .nav-tabs .nav-link {
        color: #6c757d;
        border: none;
        border-bottom: 2px solid transparent;
        padding: 0.5rem 1rem;
    }
    
    .nav-tabs .nav-link.active {
        color: #d4af37;
        border-bottom: 2px solid #d4af37;
        background: transparent;
    }
    
    /* Unsplash Results Styling */
    .unsplash-results {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
        max-height: 400px;
        overflow-y: auto;
    }
    
    .unsplash-image {
        position: relative;
        cursor: pointer;
        border-radius: 4px;
        overflow: hidden;
        aspect-ratio: 4/3;
    }
    
    .unsplash-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.2s;
    }
    
    .unsplash-image:hover img {
        transform: scale(1.05);
    }
    
    .unsplash-image.selected {
        box-shadow: 0 0 0 3px #d4af37;
    }
    
    .unsplash-image .photographer {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgba(0, 0, 0, 0.6);
        color: white;
        padding: 5px;
        font-size: 10px;
        opacity: 0;
        transition: opacity 0.2s;
    }
    
    .unsplash-image:hover .photographer {
        opacity: 1;
    }
    
    /* Gallery Images */
    .gallery-images {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 10px;
        max-height: 250px;
        overflow-y: auto;
    }
    
    .gallery-image-item {
        position: relative;
        cursor: grab;
        border-radius: 4px;
        overflow: hidden;
        aspect-ratio: 1;
    }
    
    .gallery-image-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .gallery-image-item .remove-gallery-image {
        position: absolute;
        top: 5px;
        right: 5px;
        background: rgba(0,0,0,0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        font-size: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.2s;
    }
    
    .gallery-image-item:hover .remove-gallery-image {
        opacity: 1;
    }
    
    /* Image Editor Toolbar */
    .image-toolbar {
        position: absolute;
        background: white;
        border-radius: 4px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.2);
        display: flex;
        align-items: center;
        padding: 5px;
        z-index: 1000;
        opacity: 0;
        pointer-events: none;
        transform: translateY(10px);
        transition: opacity 0.2s, transform 0.2s;
    }
    
    .image-toolbar.visible {
        opacity: 1;
        pointer-events: auto;
        transform: translateY(0);
    }
    
    .image-toolbar .toolbar-button {
        background: transparent;
        border: none;
        width: 28px;
        height: 28px;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #495057;
        transition: all 0.15s ease;
        margin: 0 2px;
    }
    
    .image-toolbar .toolbar-button:hover {
        background-color: #f8f9fa;
        color: #212529;
    }
    
    .image-toolbar .toolbar-button.active {
        background-color: rgba(212, 175, 55, 0.1);
        color: #d4af37;
    }
    
    .image-toolbar .separator {
        width: 1px;
        height: 20px;
        background-color: #e9ecef;
        margin: 0 5px;
    }
    
    /* Caption Input */
    .caption-input-container {
        position: absolute;
        display: flex;
        flex-direction: column;
        background: white;
        border-radius: 4px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.2);
        padding: 10px;
        z-index: 1000;
        opacity: 0;
        pointer-events: none;
        transform: translateY(10px);
        transition: opacity 0.2s, transform 0.2s;
        width: 250px;
    }
    
    .caption-input-container.visible {
        opacity: 1;
        pointer-events: auto;
        transform: translateY(0);
    }
    
    .caption-buttons {
        display: flex;
        justify-content: flex-end;
        margin-top: 8px;
    }
    
    .caption-button {
        background: transparent;
        border: none;
        padding: 4px 8px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 13px;
        margin-left: 5px;
    }
    
    .caption-button:first-child {
        color: #d4af37;
        font-weight: 500;
    }
    
    .caption-button:first-child:hover {
        background-color: rgba(212, 175, 55, 0.1);
    }
    
    .caption-button:last-child:hover {
        background-color: #f8f9fa;
    }
    
    /* Image Figure with Caption */
    figure.content-image {
        margin: 30px 0;
        position: relative;
    }
    
    figure.content-image img {
        display: block;
        max-width: 100%;
        height: auto;
        border-radius: 4px;
    }
    
    figure.content-image figcaption {
        margin-top: 8px;
        color: #6c757d;
        font-size: 14px;
        font-style: italic;
        text-align: center;
    }
    
    /* Resizable Image Handles */
    figure.content-image .resize-handle {
        position: absolute;
        width: 10px;
        height: 10px;
        background-color: #d4af37;
        border: 1px solid white;
        border-radius: 50%;
        z-index: 5;
    }
    
    figure.content-image .resize-handle.top-left {
        top: -5px;
        left: -5px;
        cursor: nwse-resize;
    }
    
    figure.content-image .resize-handle.top-right {
        top: -5px;
        right: -5px;
        cursor: nesw-resize;
    }
    
    figure.content-image .resize-handle.bottom-left {
        bottom: -5px;
        left: -5px;
        cursor: nesw-resize;
    }
    
    figure.content-image .resize-handle.bottom-right {
        bottom: -5px;
        right: -5px;
        cursor: nwse-resize;
    }
    
    figure.content-image.resize-active {
        outline: 1px dashed #d4af37;
        user-select: none;
    }
    
    figure.content-image:hover .resize-handle {
        display: block;
    }
    
    figure.content-image .resize-handle {
        display: none;
    }
    
    /* Gallery Styling */
    .gallery-container {
        margin: 30px 0;
    }
    
    .gallery-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 10px;
        margin-bottom: 10px;
    }
    
    .gallery-grid img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 4px;
        transition: transform 0.2s;
        cursor: pointer;
    }
    
    .gallery-grid img:hover {
        transform: scale(1.03);
    }
    
    .gallery-carousel {
        position: relative;
        overflow: hidden;
        border-radius: 4px;
    }
    
    .gallery-carousel .carousel-inner {
        display: flex;
        transition: transform 0.3s ease-in-out;
    }
    
    .gallery-carousel .carousel-item {
        flex: 0 0 100%;
    }
    
    .gallery-carousel .carousel-item img {
        width: 100%;
        object-fit: contain;
        border-radius: 4px;
    }
    
    .gallery-carousel .carousel-control {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(0,0,0,0.5);
        color: white;
        border: none;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 2;
    }
    
    .gallery-carousel .carousel-control.prev {
        left: 10px;
    }
    
    .gallery-carousel .carousel-control.next {
        right: 10px;
    }
    
    .gallery-caption {
        margin-top: 10px;
        color: #6c757d;
        font-size: 14px;
        font-style: italic;
        text-align: center;
    }
    
    /* Drag and drop styles */
    .content-area.drag-over {
        background-color: rgba(212, 175, 55, 0.05);
        border: 2px dashed rgba(212, 175, 55, 0.3);
    }
    
    .editable-content.drag-over {
        background-color: rgba(212, 175, 55, 0.05);
    }
    
    /* Upload area active state */
    .upload-area.active {
        background-color: rgba(212, 175, 55, 0.05);
        border-color: #d4af37;
    }
    
    /* Content elements styling */
    .editable-content .media-container {
        margin: 30px 0;
        text-align: center;
    }
    
    .editable-content .media-container img {
        max-width: 100%;
        border-radius: 4px;
    }
    
    .editable-content .video-container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 aspect ratio */
        height: 0;
        overflow: hidden;
        margin: 30px 0;
    }
    
    .editable-content .video-container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: none;
        border-radius: 4px;
    }
    
    .editable-content .embed-container {
        margin: 30px 0;
    }
    
    .editable-content pre.code-block {
        background-color: #f8f9fa;
        border-radius: 4px;
        padding: 16px;
        margin: 30px 0;
        overflow-x: auto;
        font-family: monospace;
        font-size: 14px;
        line-height: 1.5;
        border-left: 3px solid #d4af37;
    }
    
    .editable-content .content-divider {
        margin: 30px 0;
        border: 0;
        height: 1px;
        background: #e9ecef;
        position: relative;
        text-align: center;
    }
    
    .editable-content .content-divider::before {
        content: '•••';
        position: absolute;
        top: -10px;
        background: white;
        padding: 0 10px;
        color: #adb5bd;
        font-size: 14px;
    }
    
    /* Tags Input Styling */
    .tags-hint {
        font-size: 13px;
        color: #6c757d;
    }
    
    /* Style for tag checkboxes */
    .form-check {
        margin-right: 8px;
        margin-bottom: 8px;
        background-color: rgba(212, 175, 55, 0.05);
        border: 1px solid rgba(212, 175, 55, 0.1);
        border-radius: 20px;
        padding: 5px 12px;
        transition: all 0.2s ease;
    }
    
    .form-check:hover {
        background-color: rgba(212, 175, 55, 0.1);
    }
    
    .form-check-input:checked + .form-check-label {
        font-weight: 500;
        color: #d4af37;
    }
    
    .form-check-input {
        margin-top: 0.2em;
    }
    
    .form-check-label {
        font-family: 'Montserrat', sans-serif;
        font-size: 14px;
        transition: color 0.2s ease;
    }
    
    /* Publish button states */
    .btn-golden.disabled {
        background-color: rgba(212, 175, 55, 0.5);
        border-color: rgba(212, 175, 55, 0.5);
        cursor: not-allowed;
        opacity: 0.8;
    }
    
    .btn-golden.valid {
        background-color: #28a745;
        border-color: #28a745;
    }
    
    .btn-golden.valid:hover {
        background-color: #218838;
        border-color: #1e7e34;
    }
    
    /* Tag validation styling */
    .tag-validation-error {
        color: #dc3545;
        font-weight: 500;
        animation: fadeIn 0.3s ease-in;
        padding: 5px 10px;
        border-radius: 4px;
        background-color: rgba(220, 53, 69, 0.1);
        border-left: 3px solid #dc3545;
    }
    
    .tag-selection-area.error .tag-cloud {
        border: 1px solid rgba(220, 53, 69, 0.3);
        background-color: rgba(220, 53, 69, 0.05);
        border-radius: 6px;
        padding: 10px;
    }
    
    .tag-selection-area .tag-item:hover {
        transform: translateY(-2px);
        transition: transform 0.2s ease;
    }
    
    .tags-hint i.error-icon {
        color: #dc3545;
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(-5px); }
        to { opacity: 1; transform: translateY(0); }
    }
      /* Tag selection success indicator */
    .tag-selection-complete {
        color: #28a745;
        font-weight: 500;
    }
    
    /* Tag Selection Area Styling */
    .tag-selection-area {
        margin-top: 50px;
        padding: 20px 0;
        border-top: 1px solid #e9ecef;
    }
    
    .tag-selection-area h4 {
        font-family: 'Montserrat', sans-serif;
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 15px;
        color: #495057;
    }
    
    .tag-cloud {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }
    
    .tag-item {
        position: relative;
    }
    
    .tag-checkbox {
        position: absolute;
        opacity: 0;
        pointer-events: none;
    }
    
    .tag-label {
        display: flex;
        align-items: center;
        padding: 8px 16px;
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 20px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        color: #6c757d;
        transition: all 0.2s ease;
        user-select: none;
    }
    
    .tag-label:hover {
        background-color: rgba(212, 175, 55, 0.1);
        border-color: rgba(212, 175, 55, 0.3);
        color: #d4af37;
        transform: translateY(-1px);
    }
    
    .tag-checkbox:checked + .tag-label {
        background-color: rgba(212, 175, 55, 0.15);
        border-color: #d4af37;
        color: #d4af37;
        font-weight: 600;
    }
      .tag-label i {
        margin-right: 6px;
        font-size: 12px;
    }
    
    /* Mobile Responsiveness */
    @@media (max-width: 768px) {
        .editor-container {
            padding: 40px 15px;
        }
        
        .editable-title {
            font-size: 32px;
        }
        
        .editable-subtitle {
            font-size: 18px;
        }
        
        .editable-content {
            font-size: 18px;
        }
        
        .editor-navbar {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }
        
        .editor-actions {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        .content-add-button {
            left: -40px;
        }
        
        .formatting-toolbar {
            flex-direction: column;
            max-width: calc(100vw - 40px);
        }    }
</style>

@section Scripts {
    <script src="~/js/rich-editor.js"></script>
    <script src="~/js/rich-editor-media.js"></script>
    <script src="~/js/image-editor.js"></script>
    <script src="~/js/create-post.js"></script>
}
            },
            
            load: function() {
                if (!localStorageAvailable) {
                    if (DEBUG) console.warn("Cannot load draft: localStorage unavailable");
                    return null;
                }
                
                try {
                    const draftKey = getPostKey();
                    if (DEBUG) console.log(`Loading draft from key: ${draftKey}`);
                    const draftData = localStorage.getItem(draftKey);
                    
                    if (!draftData) {
                        if (DEBUG) console.log("No draft found for key:", draftKey);
                        return null;
                    }
                    
                    const draft = JSON.parse(draftData);
                    if (DEBUG) console.log("Draft loaded successfully:", draft);
                    return draft;
                } catch (error) {
                    console.error('LocalStorage load error:', error);
                    return null;
                }
            },
            
            clear: function() {
                if (!localStorageAvailable) {
                    if (DEBUG) console.warn("Cannot clear draft: localStorage unavailable");
                    return false;
                }
                
                try {
                    const draftKey = getPostKey();
                    if (DEBUG) console.log(`Clearing draft for key: ${draftKey}`);
                    localStorage.removeItem(draftKey);
                    return true;
                } catch (error) {
                    console.error('LocalStorage clear error:', error);
                    return false;
                }
            },
            
            markAsPublished: function() {
                if (!localStorageAvailable) {
                    if (DEBUG) console.warn("Cannot mark draft as published: localStorage unavailable");
                    return false;
                }
                
                try {
                    // First clear this draft completely
                    this.clear();
                    
                    // Then store this post ID in a list of published posts
                    const publishedPosts = JSON.parse(localStorage.getItem('published_posts') || '[]');
                    const postId = document.getElementById('postId').value;
                    if (postId && !publishedPosts.includes(postId)) {
                        publishedPosts.push(postId);
                        localStorage.setItem('published_posts', JSON.stringify(publishedPosts));
                    }
                    
                    // Also store the timestamp of the last publication
                    localStorage.setItem('last_published_timestamp', new Date().toISOString());
                    localStorage.setItem('last_published_post_id', postId);
                    
                    return true;
                } catch (error) {
                    console.error('Error marking draft as published:', error);
                    return false;
                }
            },
            
            isPublished: function(postId) {
                if (!localStorageAvailable) {
                    if (DEBUG) console.warn("Cannot check if draft is published: localStorage unavailable");
                    return false;
                }
                
                try {
                    if (!postId) {
                        postId = document.getElementById('postId').value;
                    }
                    
                    // Check if this post ID is in the published posts list
                    const publishedPosts = JSON.parse(localStorage.getItem('published_posts') || '[]');
                    return publishedPosts.includes(postId);
                } catch (error) {
                    return false;
                }
            },
            
            clearAllDrafts: function() {
                if (!localStorageAvailable) {
                    if (DEBUG) console.warn("Cannot clear all drafts: localStorage unavailable");
                    return false;
                }
                
                try {
                    const keys = [];
                    for (let i = 0; i < localStorage.length; i++) {
                        const key = localStorage.key(i);
                        if (key && (key.startsWith('post_draft_') || key === 'new_post_draft')) {
                            keys.push(key);
                        }
                    }
                    keys.forEach(key => localStorage.removeItem(key));
                    console.log(`Cleared ${keys.length} drafts from local storage`);
                    return true;
                } catch (error) {
                    console.error('Error clearing all drafts:', error);
                    return false;
                }
            }
        };
        
        // Update word and character count
        function updateWordCount() {
            try {
                const contentEditor = document.getElementById('contentEditor');
                const wordCountElement = document.getElementById('wordCount');
                const charCountElement = document.getElementById('characterCount');
                
                if (contentEditor && wordCountElement && charCountElement) {
                    const text = contentEditor.innerText || contentEditor.textContent || '';
                    const wordCount = text.trim() === '' ? 0 : text.trim().split(/\s+/).length;
                    const charCount = text.length;
                    
                    wordCountElement.textContent = `${wordCount} words`;
                    charCountElement.textContent = `${charCount} characters`;
                    
                    // Debug info - can be removed after fixing
                    console.log(`Word count: ${wordCount}, Char count: ${charCount}`);
                } else {
                    console.error('Required elements not found for word/character count');
                }
            } catch (error) {
                console.error('Error updating word/character count:', error);
            }
        }
        
        // Update hidden form fields with contenteditable content
        function updateFormFields() {
            document.getElementById('Title').value = document.getElementById('titleEditor').innerText.trim();
            document.getElementById('Description').value = document.getElementById('descriptionEditor').innerText.trim();
            document.getElementById('Content').value = document.getElementById('contentEditor').innerText.trim();
            
            // Get selected tag IDs
            const selectedTagIds = Array.from(document.querySelectorAll('.tag-checkbox'))
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.value);
            
            document.getElementById('Tags').value = selectedTagIds.join(',');
        }
        
        // Initialize editor with enhanced error handling
        document.addEventListener('DOMContentLoaded', function() {
            // Check if localStorage is available
            localStorageAvailable = checkStorageAvailability();
            
            if (!localStorageAvailable) {
                console.warn("localStorage is not available. Draft functionality will be limited.");
                // Hide draft restoration UI since it won't work
                if (draftStatus) draftStatus.style.display = 'none';
            }
            
            const titleEditor = document.getElementById('titleEditor');
            const descriptionEditor = document.getElementById('descriptionEditor');
            const contentEditor = document.getElementById('contentEditor');
            const publishBtn = document.getElementById('publishBtn');
            const tagCheckboxes = document.querySelectorAll('.tag-checkbox');
            
            // Ensure character count is initialized properly
            setTimeout(updateWordCount, 100);
            
            // Initial word count update
            updateWordCount();
            
            // Initialize auto-expanding editors
            initAutoExpand(titleEditor);
            initAutoExpand(descriptionEditor);
            initAutoExpand(contentEditor);
            
            // Initialize content for tracking changes
            updateFormFields();
            const title = document.getElementById('Title').value;
            const content = document.getElementById('Content').value;
            const description = document.getElementById('Description').value;
            lastSavedContent = title + content + description;
            
            // Check if we just came from publishing a post (within the last minute)
            const lastPublishedTime = localStorage.getItem('last_published_timestamp');
            let justPublished = false;
            
            if (lastPublishedTime) {
                const pubTime = new Date(lastPublishedTime);
                const now = new Date();
                const timeDiffSeconds = Math.floor((now - pubTime) / 1000);
                
                // If we published less than 60 seconds ago, consider we just published
                if (timeDiffSeconds < 60) {
                    justPublished = true;
                    console.log("Just published a post. Clearing all drafts.");
                    localStorageDraft.clearAllDrafts();
                }
            }
            
            // Check if this is truly a new post (empty ID and fields)
            const postId = document.getElementById('postId').value;
            const isNewPost = postId === '0' && !title && !content;
            
            // If this is a brand new post or we just published, clear any previous drafts to prevent confusion
            if (isNewPost || justPublished) {
                localStorageDraft.clearAllDrafts();
            }
            
            // See if this is a previously published post
            if (postId !== '0' && localStorageDraft.isPublished(postId)) {
                // This is a published post, make sure there's no draft for it
                localStorageDraft.clear(); 
                console.log(`Post ${postId} was already published, cleared any drafts.`);
            }
            
            // See if we have a local draft for this post - with enhanced timing
            if (localStorageAvailable) {
                // Delay draft check slightly to ensure DOM is fully processed
                setTimeout(() => {
                    checkForDraft();
                }, 300);
            }
            
            function checkForDraft() {
                try {
                    const draft = localStorageDraft.load();
                    const title = document.getElementById('Title').value;
                    const content = document.getElementById('Content').value;
                    const postId = document.getElementById('postId').value;
                    
                    // Check if we just came from publishing a post (within the last minute)
                    const lastPublishedTime = localStorage.getItem('last_published_timestamp');
                    let justPublished = false;
                    
                    if (lastPublishedTime) {
                        const pubTime = new Date(lastPublishedTime);
                        const now = new Date();
                        const timeDiffSeconds = Math.floor((now - pubTime) / 1000);
                        
                        // If we published less than 60 seconds ago, consider we just published
                        if (timeDiffSeconds < 60) {
                            justPublished = true;
                            if (DEBUG) console.log("Just published a post. Clearing all drafts.");
                            localStorageDraft.clearAllDrafts();
                        }
                    }
                    
                    // Only show restore option if:
                    // 1. We have a draft
                    // 2. It's not a post we just published
                    // 3. The post ID is not in our published posts list
                    if (draft && draft.lastUpdated && !justPublished && !localStorageDraft.isPublished(postId)) {
                        // Calculate the time since the draft was saved
                        const draftDate = new Date(draft.lastUpdated);
                        const now = new Date();
                        const timeDiff = Math.floor((now - draftDate) / 1000 / 60); // minutes
                        
                        // Get formatted time string (e.g., "10 minutes ago" or "2 hours ago")
                        let timeAgo = timeDiff < 1 ? 'just now' : 
                                    timeDiff === 1 ? '1 minute ago' : 
                                    timeDiff < 60 ? `${timeDiff} minutes ago` :
                                    timeDiff < 120 ? '1 hour ago' : 
                                    `${Math.floor(timeDiff/60)} hours ago`;
                        
                        // Show restore button with time information
                        const restoreText = `Restore unsaved draft (saved ${timeAgo})`;
                        if (DEBUG) console.log("Found draft from", timeAgo);
                        
                        if (restoreDraftBtn) {
                            restoreDraftBtn.innerHTML = `<i class="bi bi-arrow-counterclockwise"></i> ${restoreText}`;
                            draftStatus.style.display = 'block';
                        }
                        
                        // Auto-restore if the form is empty but a draft exists
                        if (!title && !content && draft.title && draft.content) {
                            // Wait briefly to allow the page to render before restoring
                            setTimeout(() => {
                                const shouldRestore = confirm("An unsaved draft was found. Would you like to restore it?");
                                if (shouldRestore) {
                                    restoreDraft(draft);
                                } else {
                                    // If user declines to restore, clear the draft
                                    localStorageDraft.clear();
                                    draftStatus.style.display = 'none';
                                }
                            }, 500);
                        }
                    } else {
                        // No valid draft to restore
                        if (draftStatus) draftStatus.style.display = 'none';
                    }
                } catch (error) {
                    console.error("Error checking for draft:", error);
                    // Hide draft UI in case of error
                    if (draftStatus) draftStatus.style.display = 'none';
                }
            }
            
            // Function to restore a draft with enhanced error handling
            function restoreDraft(draft) {
                try {
                    if (DEBUG) console.log("Restoring draft:", draft);
                    
                    if (!titleEditor || !descriptionEditor || !contentEditor) {
                        console.error("Editor elements not found");
                        return;
                    }
                    
                    titleEditor.innerHTML = draft.title || '';
                    descriptionEditor.innerHTML = draft.description || '';
                    contentEditor.innerHTML = draft.content || '';
                    
                    // Restore tags if available
                    if (draft.tagIds && draft.tagIds.length > 0) {
                        // Clear all checkboxes first
                        tagCheckboxes.forEach(checkbox => checkbox.checked = false);
                        
                        // Check the saved ones
                        draft.tagIds.forEach(tagId => {
                            const checkbox = document.querySelector(`.tag-checkbox[value="${tagId}"]`);
                            if (checkbox) checkbox.checked = true;
                        });
                    }
                    
                    // Update the form fields
                    updateFormFields();
                    
                    // Update word count
                    updateWordCount();
                    
                    // Hide the restore button
                    if (draftStatus) draftStatus.style.display = 'none';
                    
                    // Show a success message
                    showSaveStatus('saved', 'Draft restored');
                    
                    // Adjust heights for auto-expanding
                    adjustHeight(titleEditor);
                    adjustHeight(descriptionEditor);
                    adjustHeight(contentEditor);
                    
                    // Update publish button state
                    updatePublishButtonState();
                    
                    if (DEBUG) console.log("Draft successfully restored");
                } catch (error) {
                    console.error("Error restoring draft:", error);
                    showSaveStatus('error', 'Error restoring draft');
                }
            }
        
            // Restore draft button click handler
            restoreDraftBtn.addEventListener('click', function() {
                const draft = localStorageDraft.load();
                if (draft) {
                    restoreDraft(draft);
                }
            });
            
            // Place cursor in title if empty
            if (!title) {
                titleEditor.focus();
            } else if (!content) {
                contentEditor.focus();
            }
            
            // Handle paste to remove formatting
            [titleEditor, descriptionEditor, contentEditor].forEach(editor => {
                editor.addEventListener('paste', function(e) {
                    e.preventDefault();
                    const text = (e.originalEvent || e).clipboardData.getData('text/plain');
                    document.execCommand('insertText', false, text);
                });
                
                // Update form fields on input and save to localStorage
                editor.addEventListener('input', function(e) {
                    updateFormFields();
                    if (this === contentEditor) {
                        updateWordCount();
                    }
                    
                    // Clear existing timers
                    clearTimeout(autoSaveTimer);
                    clearTimeout(localSaveTimer);
                    
                    // Set new timers
                    localSaveTimer = setTimeout(saveToLocalStorage, localSaveDelay);
                    autoSaveTimer = setTimeout(performAutoSave, autoSaveDelay);

                    // Handle Markdown-like shortcuts
                    if (e.inputType === 'insertText' && e.data === ' ') {
                        handleMarkdownBlockShortcutsOnSpace(this);
                    }
                });
                
                // Add keydown handler to create new paragraph on Enter in title and subtitle
                if (editor !== contentEditor) {
                    editor.addEventListener('keydown', function(e) {
                        if (e.key === 'Enter') {
                            e.preventDefault();
                            contentEditor.focus();
                        }
                    });
                }
            });
            
            // Add tab key support between editors
            titleEditor.addEventListener('keydown', function(e) {
                if (e.key === 'Tab' && !e.shiftKey) {
                    e.preventDefault();
                    descriptionEditor.focus();
                }
            });
            
            descriptionEditor.addEventListener('keydown', function(e) {
                if (e.key === 'Tab') {
                    e.preventDefault();
                    if (e.shiftKey) {
                        titleEditor.focus();
                    } else {
                        contentEditor.focus();
                    }
                }
            });
            
            contentEditor.addEventListener('keydown', function(e) {
                if (e.key === 'Tab' && e.shiftKey) {
                    e.preventDefault();
                    descriptionEditor.focus();
                }
            });
            
            // Handle input in content editor with explicit character count update
            contentEditor.addEventListener('input', function() {
                updateFormFields();
                updateWordCount(); // Always update word count when content changes
            });
            
            // As a fallback, periodically update the word count
            setInterval(updateWordCount, 2000);
              // Initialize formatting toolbar
            initFormattingToolbar();
            
            // Initialize content addition functionality
            initContentAddButton();
            
            // Initialize enhanced media handling features
            if (typeof initializeMediaHandling === 'function') {
                initializeMediaHandling();
            }
            
            // Handle tag checkbox changes - enhanced with validation
            tagCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    updateFormFields();
                    updatePublishButtonState();
                    validateTagSelection();
                    
                    // Trigger auto-save
                    clearTimeout(autoSaveTimer);
                    clearTimeout(localSaveTimer);
                    localSaveTimer = setTimeout(saveToLocalStorage, localSaveDelay);
                    autoSaveTimer = setTimeout(performAutoSave, autoSaveDelay);
                });
            });
            
            // Update publish button state based on tag selection
            function updatePublishButtonState() {
                const hasSelectedTags = getSelectedTagIds().length > 0;
                
                if (hasSelectedTags) {
                    publishBtn.classList.remove('disabled');
                    publishBtn.classList.add('valid');
                    publishBtn.disabled = false;
                } else {
                    publishBtn.classList.add('disabled');
                    publishBtn.classList.remove('valid');
                    publishBtn.disabled = true;
                }
            }
            
            // Initialize publish button state
            updatePublishButtonState();
            
            // Update form fields on input
            function updateFormFields() {
                document.getElementById('Title').value = document.getElementById('titleEditor').innerText.trim();
                document.getElementById('Description').value = document.getElementById('descriptionEditor').innerText.trim();
                document.getElementById('Content').value = document.getElementById('contentEditor').innerText.trim();
                
                // Get selected tag IDs - this updates the hidden Tags field but we'll use the actual checkboxes for submission
                const selectedTagIds = Array.from(tagCheckboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => checkbox.value);
                
                document.getElementById('Tags').value = selectedTagIds.join(',');
                
                // Update visual cue for tag selection
                if (selectedTagIds.length > 0) {
                    document.getElementById('tagValidationMessage').textContent = 
                        `${selectedTagIds.length} tag${selectedTagIds.length > 1 ? 's' : ''} selected`;
                } else {
                    document.getElementById('tagValidationMessage').textContent = 
                        'Add at least one tag to publish your story';
                }
            }
        });
        
        // Function to save content to localStorage with enhanced error handling
        function saveToLocalStorage() {
            if (!localStorageAvailable) {
                return false;
            }
            
            try {
                // Only save if there's actually content to save
                const title = document.getElementById('Title').value;
                const content = document.getElementById('Content').value;
                const tags = document.getElementById('Tags').value;
                
                if (title.trim() === '' && content.trim() === '') {
                    if (DEBUG) console.log("Nothing to save - empty content");
                    return false;
                }
                
                if (localStorageDraft.save()) {
                    // Show a brief "Saved to device" message
                    const saveText = saveStatus.querySelector('.save-text');
                    if (saveText) {
                        const originalText = saveText.textContent;
                        saveText.textContent = 'Saved to device';
                        
                        // Revert back to original text after 2 seconds
                        setTimeout(() => {
                            saveText.textContent = originalText;
                        }, 2000);
                    }
                    return true;
                }
                return false;
            } catch (error) {
                console.error("Error saving to localStorage:", error);
                return false;
            }
        }
        
        // Function to initialize auto-expanding editors
        function initAutoExpand(element) {
            // Set initial height if content exists
            adjustHeight(element);
            
            // Add input event listener to adjust height as user types
            element.addEventListener('input', function() {
                adjustHeight(this);
            });
            
            // Also adjust on window resize
            window.addEventListener('resize', function() {
                adjustHeight(element);
            });
        }
        
        // Function to adjust element height based on content
        function adjustHeight(element) {
            // Reset height to auto so we can calculate the new height
            element.style.height = 'auto';
            
            // Get scrollHeight (full content height) and add a small buffer
            const newHeight = element.scrollHeight;
            
            // Set new height
            element.style.height = newHeight + 'px';
            
            // Ensure minimum height
            if (element.id === 'titleEditor' && newHeight < 60) {
                element.style.height = '60px';
            } else if (element.id === 'descriptionEditor' && newHeight < 40) {
                element.style.height = '40px';
            }
        }
        
        // Show save status
        function showSaveStatus(status, message) {
            const saveText = saveStatus.querySelector('.save-text');
            saveText.textContent = message;
            
            saveStatus.className = 'save-indicator ' + status;
            
            if (status === 'saved') {
                // Return to default state after 3 seconds
                setTimeout(() => {
                    saveText.textContent = 'Saved';
                    saveStatus.className = 'save-indicator';
                }, 3000);
            }
        }
        
        // Function to perform auto-save
        function performAutoSave() {
            if (savingInProgress) return;
            
            updateFormFields();
            
            const title = document.getElementById('Title').value;
            const content = document.getElementById('Content').value;
            const description = document.getElementById('Description').value;
            const tags = document.getElementById('Tags').value;
            const url = document.getElementById('Url').value;
            const postId = document.getElementById('postId').value;
            
            // Get selected tag IDs for comparison and saving
            const selectedTagIds = getSelectedTagIds();
            const tagString = selectedTagIds.join(',');
            document.getElementById('Tags').value = tagString;
            
            // Don't save if nothing has changed or if both title and content are empty
            const currentContent = title + content + description + tagString;
            if (currentContent === lastSavedContent || (title.trim() === '' && content.trim() === '')) {
                return;
            }
            
            savingInProgress = true;
            showSaveStatus('saving', 'Saving...');
            
            // Create URL slug from title if empty
            if (!url && title.trim() !== '') {
                const slug = title.toLowerCase()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/-+/g, '-')
                    .trim();
                document.getElementById('Url').value = slug;
            }
            
            const formData = new FormData();
            formData.append('Title', title);
            formData.append('Content', content);
            formData.append('Description', description);
            formData.append('Tags', tagString);
            formData.append('Url', document.getElementById('Url').value);
            formData.append('PostId', postId);
            
            // Critical: Add each tag ID individually to ensure proper array format
            selectedTagIds.forEach(tagId => {
                formData.append('tagIds[]', tagId);
            });
            
            // Get the anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            fetch('@Url.Action("AutoSave")', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': token
                }
            })
            .then(response => response.json())
            .then(data => {
                savingInProgress = false;
                
                if (data.success) {
                    showSaveStatus('saved', 'Saved');
                    lastSavedContent = currentContent;
                    
                    // If this is a new draft, update the postId field
                    if (postId === '0' && data.postId) {
                        document.getElementById('postId').value = data.postId;
                    }
                    
                    // Since we successfully saved to server, update localStorage with new content
                    saveToLocalStorage();
                } else {
                    showSaveStatus('error', 'Failed to save');
                }
            })
            .catch(error => {
                savingInProgress = false;
                showSaveStatus('error', 'Error: Could not save');
                console.error('Auto-save error:', error);
                
                // Save to localStorage when server save fails
                saveToLocalStorage();
            });
        }
        
        // Save before user leaves the page
        window.addEventListener('beforeunload', () => {
            updateFormFields();
            saveToLocalStorage();
        });
        
        // Preview button handler
        document.getElementById('previewBtn').addEventListener('click', function(e) {
            e.preventDefault();
            updateFormFields();
            performAutoSave();
            
            // Get selected tag names for preview
            const selectedTags = Array.from(document.querySelectorAll('.tag-checkbox'))
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.nextElementSibling.textContent.trim());
            
            // Simple preview in new window
            const title = document.getElementById('Title').value || 'Untitled';
            const content = document.getElementById('Content').value || '';
            const description = document.getElementById('Description').value || '';
            
            const previewWindow = window.open('', '_blank');
            previewWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>${title} - Preview</title>
                    <link rel="stylesheet" href="/lib/bootstrap/css/bootstrap.min.css">
                    <link rel="stylesheet" href="/lib/bootstrap-icons/font/bootstrap-icons.min.css">
                    <link rel="stylesheet" href="/css/style.css">
                    <link href="https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700&family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
                    <style>
                        body { font-family: 'Merriweather', serif; line-height: 1.8; padding: 40px; max-width: 800px; margin: 0 auto; }
                        h1 { font-family: 'Montserrat', sans-serif; font-weight: 700; margin-bottom: 20px; }
                        .subtitle { font-size: 1.2rem; color: #6c757d; margin-bottom: 30px; }
                        .preview-banner { background-color: #f8f9fa; padding: 10px; text-align: center; margin-bottom: 30px; }
                        .tags-container { margin-top: 30px; }
                        .tag { display: inline-block; background-color: rgba(212, 175, 55, 0.1); border: 1px solid rgba(212, 175, 55, 0.3); color: #6c757d; padding: 4px 10px; border-radius: 20px; margin-right: 8px; margin-bottom: 8px; font-size: 14px; font-family: 'Montserrat', sans-serif; }
                    </style>
                </head>
                <body>
                    <div class="preview-banner">
                        <strong>Preview Mode</strong> - This is how your story will look when published
                    </div>
                    <h1>${title}</h1>
                    <div class="subtitle">${description}</div>
                    <div class="content">${content.replace(/\n/g, '<br>')}</div>
                    <div class="tags-container">
                        ${selectedTags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                    </div>
                </body>
                </html>
            `);
        });
        
        // Publish button handler - enhanced with better validation
        document.getElementById('publishBtn').addEventListener('click', function(e) {
            e.preventDefault();
            updateFormFields();
            
            // Validate tag selection and show appropriate UI feedback
            if (!validateTagSelection()) {
                // Scroll to tag selection area with a highlight effect
                document.querySelector('.tag-selection-area').scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'center' 
                });
                
                // Add a temporary highlight effect to draw attention
                const tagCloud = document.querySelector('.tag-cloud');
                tagCloud.style.transition = 'background-color 0.3s ease';
                tagCloud.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                
                setTimeout(() => {
                    tagCloud.style.backgroundColor = '';
                }, 1000);
                
                return;
            }
            
            document.getElementById('formAction').value = 'publish';
            
            // Submit the form
            const form = document.getElementById('storyForm');
            
            // Get final list of selected tags
            const selectedTagIds = getSelectedTagIds();
            
            // Ensure hidden tags input is updated with latest selections
            document.getElementById('Tags').value = selectedTagIds.join(',');
            
            // Create hidden inputs for each selected tag
            selectedTagIds.forEach(tagId => {
                // First check if this hidden input already exists to avoid duplicates
                const existingInput = form.querySelector(`input[name="tagIds"][value="${tagId}"]`);
                if (!existingInput || existingInput.checked === undefined) {
                    // Remove any old hidden input for this tag that might be unchecked now
                    const oldInput = form.querySelector(`input[type="hidden"][name="tagIds"][value="${tagId}"]`);
                    if (oldInput) {
                        oldInput.remove();
                    }
                    
                    // Create a new hidden input
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'tagIds';
                    hiddenInput.value = tagId;
                    form.appendChild(hiddenInput);
                }
            });
            
            // Mark draft as published BEFORE submitting
            localStorageDraft.markAsPublished();
            
            // Set up a success flag to clear localStorage after submission
            const publishedPostId = document.getElementById('postId').value;
            
            // Add event listener for successful form submission
            form.addEventListener('submit', function() {
                // Clear ALL drafts when publishing is successful
                setTimeout(() => {
                    localStorageDraft.clearAllDrafts();
                    console.log('Cleared all drafts after successful publish');
                }, 200);
            }, { once: true });
            
            // Final verification that all selected tags have corresponding form entries
            const formTagInputs = form.querySelectorAll('input[name="tagIds"]');
            const formTagValues = Array.from(formTagInputs).map(input => input.value);
            console.log(`Submitting form with ${formTagValues.length} tags: ${formTagValues.join(', ')}`);
            
            form.submit();
        });
        
        // Helper function to get selected tag IDs - enhanced with validation
        function getSelectedTagIds() {
            try {
                // Get all checked tag checkboxes
                const checkedTagElements = document.querySelectorAll('.tag-checkbox:checked');
                
                // Convert to array and extract values
                const tagIds = Array.from(checkedTagElements).map(checkbox => checkbox.value);
                
                return tagIds;
            } catch (error) {
                console.error('Error collecting tag IDs:', error);
                // Return empty array in case of error to prevent breaking the form
                return [];
            }
        }
        
        // Validate tag selection and show appropriate UI feedback
        function validateTagSelection() {
            const selectedTagIds = getSelectedTagIds();
            const tagValidationMessage = document.getElementById('tagValidationMessage');
            const tagSelectionArea = document.querySelector('.tag-selection-area');
            const infoIcon = tagValidationMessage.previousElementSibling;
            
            if (selectedTagIds.length === 0) {
                // No tags selected - show error
                tagValidationMessage.innerHTML = '<span class="tag-validation-error">Please select at least one tag before publishing</span>';
                tagSelectionArea.classList.add('error');
                infoIcon.classList.add('error-icon');
                return false;
            } else {
                // Tags selected - show success
                tagValidationMessage.innerHTML = `<span class="tag-selection-complete">${selectedTagIds.length} tag${selectedTagIds.length > 1 ? 's' : ''} selected</span>`;
                tagSelectionArea.classList.remove('error');
                infoIcon.classList.remove('error-icon');
                return true;
            }
        }
        
        // Update form fields function - enhanced with tag validation
        function updateFormFields() {
            document.getElementById('Title').value = document.getElementById('titleEditor').innerText.trim();
            document.getElementById('Description').value = document.getElementById('descriptionEditor').innerText.trim();
            document.getElementById('Content').value = document.getElementById('contentEditor').innerText.trim();
            
            // Get selected tag IDs using the helper function
            const selectedTagIds = getSelectedTagIds();
            
            // Set the hidden Tags field with comma-separated tag IDs
            document.getElementById('Tags').value = selectedTagIds.join(',');
            
            // Update visual cue for tag selection
            const tagValidationMessage = document.getElementById('tagValidationMessage');
            const tagSelectionArea = document.querySelector('.tag-selection-area');
            const infoIcon = tagValidationMessage.previousElementSibling;
            
            if (selectedTagIds.length > 0) {
                tagValidationMessage.textContent = 
                    `${selectedTagIds.length} tag${selectedTagIds.length > 1 ? 's' : ''} selected`;
                tagValidationMessage.classList.remove('text-danger');
                tagSelectionArea.classList.remove('error');
                infoIcon.classList.remove('error-icon');
            } else {
                tagValidationMessage.textContent = 'Add at least one tag to publish your story';
                infoIcon.classList.remove('error-icon');
                tagSelectionArea.classList.remove('error');
            }
        }
        
        // Formatting toolbar related code - Updated for minimalist design
        function initFormattingToolbar() {
            const toolbar = document.getElementById('formattingToolbar');
            const linkForm = document.getElementById('linkForm');
            const linkInput = document.getElementById('linkInput');
            const applyLinkButton = document.getElementById('applyLinkButton');
            const cancelLinkButton = document.getElementById('cancelLinkButton');
            const contentEditor = document.getElementById('contentEditor');
            const highlightButton = toolbar.querySelector('.toolbar-button[data-command="highlight"]');
            const highlightColorPicker = document.getElementById('highlightColorPicker');
            const colorOptions = highlightColorPicker.querySelectorAll('.color-option');
            const removeHighlightButton = highlightColorPicker.querySelector('.toolbar-button[data-command="removeHighlight"]');
            
            let currentSelection = null; // Store selection range
            let selectionTimeout = null;
            
            // Check for text selection and show toolbar with a small delay
            document.addEventListener('selectionchange', function() {
                clearTimeout(selectionTimeout);
                
                selectionTimeout = setTimeout(() => {
                    const selection = window.getSelection();
                    
                    if (selection.rangeCount > 0 && selection.toString().trim() !== '') {
                        const range = selection.getRangeAt(0);
                        
                        if (contentEditor.contains(range.commonAncestorContainer)) {
                            currentSelection = range.cloneRange(); // Save the current selection
                            showToolbar(selection);
                        } else {
                            if (!toolbar.contains(document.activeElement) && (!highlightColorPicker || !highlightColorPicker.contains(document.activeElement))) {
                                hideToolbar();
                            }
                        }
                    } else {
                        // Only hide toolbar if not interacting with it or its sub-elements (like color picker)
                        if (!toolbar.contains(document.activeElement) && (!highlightColorPicker || !highlightColorPicker.contains(document.activeElement))) {
                            hideToolbar();
                        }
                    }
                }, 100); // Small delay to prevent flashing
            });
            
            // Show the toolbar at the selection
            function showToolbar(selection) {
                const range = selection.getRangeAt(0);
                const rect = range.getBoundingClientRect();
                
                // Position the toolbar above the selection
                toolbar.style.top = `${window.scrollY + rect.top - toolbar.offsetHeight - 10}px`;
                toolbar.style.left = `${window.scrollX + rect.left + (rect.width / 2) - (toolbar.offsetWidth / 2)}px`;
                
                // Make sure the toolbar stays within viewport bounds
                const rightEdge = toolbar.getBoundingClientRect().right;
                const viewportWidth = window.innerWidth;
                
                if (rightEdge > viewportWidth) {
                    const offset = rightEdge - viewportWidth + 10;
                    toolbar.style.left = `${parseInt(toolbar.style.left) - offset}px`;
                }
                
                if (parseInt(toolbar.style.left) < 10) {
                    toolbar.style.left = '10px';
                }
                
                // Show the toolbar with animation
                toolbar.classList.add('visible');
                
                // Update active state of buttons based on current formatting
                updateToolbarState();
            }
            
            // Hide the toolbar
            function hideToolbar() {
                // Don't hide if we're in the link form and it's focused
                if (linkForm.classList.contains('visible') && 
                    (document.activeElement === linkInput || 
                     document.activeElement === applyLinkButton || 
                     document.activeElement === cancelLinkButton)) {
                    return;
                }
                // Don't hide if color picker is active and focused within
                if (highlightColorPicker && highlightColorPicker.style.display !== 'none' && highlightColorPicker.contains(document.activeElement)) {
                    return;
                }

                toolbar.classList.remove('visible');
                hideLinkForm();
                if (highlightColorPicker) {
                    highlightColorPicker.style.display = 'none';
                }
            }
            
            // Update toolbar button states based on current selection formatting
            function updateToolbarState() {
                const buttons = toolbar.querySelectorAll('.toolbar-buttons .toolbar-button'); // Target only main buttons
                const selection = window.getSelection();
                if (!selection.rangeCount) return;

                const range = selection.getRangeAt(0);
                let parentNode = range.commonAncestorContainer;
                if (parentNode.nodeType === Node.TEXT_NODE) {
                    parentNode = parentNode.parentNode;
                }

                buttons.forEach(button => {
                    button.classList.remove('active');
                    const command = button.getAttribute('data-command');

                    try {
                        if (command === 'bold' || command === 'italic' || command === 'underline' || command === 'strikeThrough' || command === 'insertOrderedList' || command === 'insertUnorderedList') {
                             if (document.queryCommandState(command)) {
                                button.classList.add('active');
                            }
                        }
                    } catch (e) { console.warn("Error queryCommandState for " + command, e); }


                    const blockType = document.queryCommandValue('formatBlock').toLowerCase();
                    if ((command === 'h1' && blockType === 'h1') ||
                        (command === 'h2' && blockType === 'h2') ||
                        (command === 'h3' && blockType === 'h3') ||
                        (command === 'quote' && (blockType === 'blockquote' || parentNode.closest('blockquote')))) { // Check parent for blockquote too
                        button.classList.add('active');
                    }
                     // Check for lists more reliably
                    if (command === 'orderedList') {
                        if (parentNode.closest('ol')) button.classList.add('active');
                    }
                    if (command === 'unorderedList') {
                         if (parentNode.closest('ul')) button.classList.add('active');
                    }


                    if (command === 'inlineCode') {
                        if (parentNode.closest('code')) button.classList.add('active');
                    }
                    
                    if (command === 'highlight') {
                        let highlightNode = parentNode;
                        let isHighlighted = false;
                        while(highlightNode && highlightNode !== contentEditor) {
                            if (highlightNode.nodeType === Node.ELEMENT_NODE && highlightNode.className && highlightNode.className.startsWith('highlight-')) {
                                isHighlighted = true;
                                break;
                            }
                            highlightNode = highlightNode.parentNode;
                        }
                        if (isHighlighted) button.classList.add('active');
                    }
                    
                    if (command === 'link') {
                        if (parentNode.closest('a')) {
                            button.classList.add('active');
                        }
                    }
                });
            }
            
            // Handle toolbar button clicks
            toolbar.querySelectorAll('.toolbar-buttons .toolbar-button').forEach(button => {
                button.addEventListener('click', function(e) {
                    const command = this.getAttribute('data-command');
                     e.stopPropagation(); // Prevent toolbar from hiding if we click a button that doesn't open a sub-form

                    if (command === 'highlight') {
                        // Toggle color picker
                        if (highlightColorPicker.style.display === 'none') {
                            highlightColorPicker.style.display = 'flex';
                            // Position it. For simplicity, it's part of the toolbar div, so relative positioning works.
                        } else {
                            highlightColorPicker.style.display = 'none';
                        }
                        return; // Don't apply formatting yet, just show/hide picker
                    }
                    
                    // For other commands, hide picker if open
                    if (highlightColorPicker) highlightColorPicker.style.display = 'none';


                    // Restore the selection before applying formatting
                    if (currentSelection) {
                         const selection = window.getSelection();
                         selection.removeAllRanges();
                         selection.addRange(currentSelection);
                    }
                    
                    applyFormatting(command);
                    
                    // Update the hidden form fields after formatting
                    updateFormFields();
                    // Toolbar might hide due to selection change, so re-update state if needed
                    setTimeout(updateToolbarState, 0); 
                });
            });

            colorOptions.forEach(option => {
                option.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const color = this.getAttribute('data-color');
                     if (currentSelection) {
                         const selection = window.getSelection();
                         selection.removeAllRanges();
                         selection.addRange(currentSelection);
                    }
                    applyFormatting('highlight', color);
                    highlightColorPicker.style.display = 'none';
                    setTimeout(hideToolbar, 50); 
                });
            });

            if (removeHighlightButton) {
                removeHighlightButton.addEventListener('click', function(e) {
                    e.stopPropagation();
                    if (currentSelection) {
                         const selection = window.getSelection();
                         selection.removeAllRanges();
                         selection.addRange(currentSelection);
                    }
                    applyFormatting('removeHighlight');
                    highlightColorPicker.style.display = 'none';
                    setTimeout(hideToolbar, 50);
                });
            }
            
            // Apply formatting based on command
            function applyFormatting(command, value = null) {
                // currentSelection should be restored by the caller if needed
                let selectionText = window.getSelection().toString();

                switch (command) {
                    case 'bold': document.execCommand('bold'); break;
                    case 'italic': document.execCommand('italic'); break;
                    case 'h1': document.execCommand('formatBlock', false, 'h1'); break;
                    case 'h2': document.execCommand('formatBlock', false, 'h2'); break;
                    case 'h3': document.execCommand('formatBlock', false, 'h3'); break;
                    case 'orderedList': document.execCommand('insertOrderedList'); break;
                    case 'unorderedList': document.execCommand('insertUnorderedList'); break;
                    case 'quote': document.execCommand('formatBlock', false, 'blockquote'); break;
                    case 'inlineCode':
                        if (selectionText) {
                            document.execCommand('insertHTML', false, '<code>' + selectionText.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") + '</code>');
                        }
                        break;
                    case 'highlight':
                        if (selectionText && value) {
                            document.execCommand('insertHTML', false, `<span class="highlight-${value}">${selectionText}</span>`);
                        }
                        break;
                    case 'removeHighlight':
                        if (selectionText) {
                            // Attempt to remove by un-wrapping. This is complex.
                            // A simpler method for now:
                            let sel = window.getSelection();
                            if (sel.rangeCount > 0) {
                                let range = sel.getRangeAt(0);
                                let el = range.commonAncestorContainer;
                                if (el.nodeType !== 1) el = el.parentNode;
                                
                                // Find the closest highlight span and remove it
                                let spanToUnwrap = null;
                                let tempEl = el;
                                while(tempEl && tempEl !== contentEditor) {
                                    if (tempEl.nodeType === 1 && tempEl.nodeName === 'SPAN' && tempEl.className && tempEl.className.startsWith('highlight-')) {
                                        spanToUnwrap = tempEl;
                                        break;
                                    }
                                    tempEl = tempEl.parentNode;
                                }

                                if (spanToUnwrap) {
                                    let parent = spanToUnwrap.parentNode;
                                    while (spanToUnwrap.firstChild) {
                                        parent.insertBefore(spanToUnwrap.firstChild, spanToUnwrap);
                                    }
                                    parent.removeChild(spanToUnwrap);
                                } else {
                                     // Fallback if no single span is found, try removeFormat on selection
                                     // This is broad, but might help.
                                     document.execCommand('removeFormat');
                                }
                            }
                        }
                        break;
                    case 'link':
                        // currentSelection is already set by selectionchange
                        showLinkForm(); 
                        return; 
                }
                updateToolbarState();
                updateFormFields();
                contentEditor.focus();
            }
            
            // Show link input form
            function showLinkForm() {
                // Hide toolbar buttons, show link form
                toolbar.querySelector('.toolbar-buttons').style.display = 'none';
                linkForm.classList.add('visible');
                
                // Get any existing link in the selection
                const selection = window.getSelection();
                if (selection.rangeCount > 0) {
                    const node = selection.getRangeAt(0).commonAncestorContainer;
                    const linkElement = getClosestLink(node);
                    
                    if (linkElement) {
                        linkInput.value = linkElement.href;
                    } else {
                        linkInput.value = '';
                    }
                }
                
                linkInput.focus();
            }
            
            // Hide link form
            function hideLinkForm() {
                linkForm.classList.remove('visible');
                toolbar.querySelector('.toolbar-buttons').style.display = 'flex';
                linkInput.value = '';
            }
            
            // Apply link button click
            applyLinkButton.addEventListener('click', function() {
                const url = linkInput.value.trim();
                if (url) {
                    // Restore the selection
                    if (currentSelection) {
                        const selection = window.getSelection();
                        selection.removeAllRanges();
                        selection.addRange(currentSelection);
                    }
                    
                    // Add protocol if missing
                    let formattedUrl = url;
                    if (!/^https?:\/\//i.test(url)) {
                        formattedUrl = 'https://' + url;
                    }
                    
                    document.execCommand('createLink', false, formattedUrl);
                    
                    // Update form fields
                    updateFormFields();
                }
                
                hideLinkForm();
                setTimeout(hideToolbar, 100);
            });
            
            // Cancel link button click
            cancelLinkButton.addEventListener('click', function() {
                hideLinkForm();
                setTimeout(hideToolbar, 100);
            });
            
            // Handle keyboard shortcuts
            contentEditor.addEventListener('keydown', function(e) {
                // Ctrl+B: Bold
                if (e.ctrlKey && e.key === 'b') {
                    e.preventDefault();
                    document.execCommand('bold', false, null);
                }
                
                // Ctrl+I: Italic
                if (e.ctrlKey && e.key === 'i') {
                    e.preventDefault();
                    document.execCommand('italic', false, null);
                }
                
                // Ctrl+K: Link
                if (e.ctrlKey && e.key === 'k') {
                    e.preventDefault();
                    if (window.getSelection().toString().trim() !== '') {
                        showLinkForm();
                    }
                }
                
                // Update form fields after formatting
                updateFormFields();
            });
            
            // Click outside handler to hide toolbar properly
            document.addEventListener('mousedown', function(e) {
                // Check if the click is outside the toolbar AND the color picker
                const isToolbarClick = toolbar.contains(e.target);
                const isPickerClick = highlightColorPicker && highlightColorPicker.contains(e.target);

                if (toolbar.classList.contains('visible') && !isToolbarClick && !isPickerClick) {
                    // If the click is on the content editor, do not hide immediately, let selectionchange handle it
                    if (contentEditor.contains(e.target)) {
                        // If click is inside selection, don't hide.
                        if (isClickInsideSelection(e)) return;
                    }
                    hideToolbar();
                }
            });
            
            // Check if click is inside the current selection
            function isClickInsideSelection(e) {
                if (!currentSelection) return false;
                
                const range = currentSelection;
                const rect = range.getBoundingClientRect();
                
                return (
                    e.clientX >= rect.left &&
                    e.clientX <= rect.right &&
                    e.clientY >= rect.top &&
                    e.clientY <= rect.bottom
                );
            }
        }

        function handleMarkdownBlockShortcutsOnSpace(editor) {
            const selection = window.getSelection();
            if (!selection.rangeCount || !selection.isCollapsed) return;

            const range = selection.getRangeAt(0);
            let container = range.startContainer; // Usually a text node
            
            if (container.nodeType !== Node.TEXT_NODE || range.startOffset === 0) return;

            let textContentBeforeSpace = container.textContent.substring(0, range.startOffset -1); // Text before the just-typed space

            // Find the block element (P, DIV, LI etc.)
            let blockElement = container;
            while (blockElement && blockElement !== editor) {
                if (blockElement.nodeType === Node.ELEMENT_NODE && 
                    (blockElement.matches('p, div, h1, h2, h3, h4, h5, h6, li') || blockElement.parentNode === editor)) {
                    // Check if textContentBeforeSpace is at the beginning of this block
                    if ((blockElement.textContent || blockElement.innerText || "").trim().startsWith(textContentBeforeSpace.trim())) {
                         break;
                    }
                }
                blockElement = blockElement.parentNode;
            }
            
            if (!blockElement || blockElement === editor) {
                 // If we are directly in contentEditor, or couldn't find a block,
                 // and the text node is the first child of the editor, treat the text node's content.
                if (container.nodeType === Node.TEXT_NODE && container.parentNode === editor) {
                    // This is a simple case, text directly in editor.
                } else {
                    return; // Cannot determine block reliably for markdown.
                }
            }
            
            // Use the text content of the text node where space was typed
            const currentTextNodeContent = container.textContent;
            const textForMarkdownCheck = currentTextNodeContent.substring(0, range.startOffset).trim(); // Includes the space

            let command = null;
            let charsToRemove = 0; // Number of chars for markdown prefix (e.g., "# ", "> ")

            if (textForMarkdownCheck === '#') { command = 'h1'; charsToRemove = 1; }
            else if (textForMarkdownCheck === '##') { command = 'h2'; charsToRemove = 2; }
            else if (textForMarkdownCheck === '###') { command = 'h3'; charsToRemove = 3; }
            else if (textForMarkdownCheck === '>') { command = 'quote'; charsToRemove = 1; }
            else if (textForMarkdownCheck === '*' || textForMarkdownCheck === '-') { command = 'insertUnorderedList'; charsToRemove = 1; }
            else if (textForMarkdownCheck.match(/^\d+\.$/)) { // Matches "1.", "10." etc.
                command = 'insertOrderedList'; 
                charsToRemove = textForMarkdownCheck.length;
            }

            if (command) {
                // The space is already typed. We need to remove the markdown prefix from the text node.
                // Range is at: prefix<space>|cursor
                // We want to delete "prefix"
                range.setStart(container, 0); // Start of text node
                range.setEnd(container, charsToRemove); // End of prefix
                
                selection.removeAllRanges();
                selection.addRange(range);
                document.execCommand('delete'); // Delete the markdown prefix (e.g., "#")

                // The space is still there. The cursor is now at the beginning of the space.
                // Applying formatBlock or list command should work correctly.
                
                if (command.startsWith('insert')) { // For lists
                    document.execCommand(command);
                } else { // For formatBlock (h1, h2, h3, blockquote)
                    document.execCommand('formatBlock', false, command);
                }
                
                // Prevent default space insertion if necessary, though 'input' event is after the fact.
                // The main goal is that the formatting is applied.
                updateFormFields();
            }
        }
    </script>
}
