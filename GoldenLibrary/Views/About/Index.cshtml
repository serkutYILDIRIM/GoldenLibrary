@{
    ViewData["Title"] = "International Women's Day";
}

<link rel="stylesheet" href="~/css/womens-day.css" />
<link rel="stylesheet" href="~/css/valentine-day.css" />
<!-- Font Awesome for achievement icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

<div class="gift-container">
    <h1 class="title">Merhaba Rivendell'i Prenses<img src="~/img/prenses.png" alt="Prenses" class="title-image" style="height: 1em; vertical-align: middle; margin-left: 5px;margin-top: -10px;"></h1>
    <h2 class="subtitle" style="color: #1e88e5;">Öncelikle yarınki makale sunumun için çook başarılar diliyorumm :) <span class="venus-symbol">🎓 🙏🏻</span></h2>

    <div class="content-grid">
        <!-- Left column with elegant sealed 3D envelope -->
        <div class="content-column envelope-column">

            <!-- Caption for the elegant envelope -->
            <div class="text-center mb-3">
                <small class="text-muted">Açmak için zarfa tıklayın 💌</small>
            </div>

            <div class="valentine-envelope-container">
                <!-- Main envelope element - completely sealed with wax seal -->
                <div id="valentine-envelope" class="envelope">
                    <!-- Envelope flap (top part that's sealed) -->
                    <div class="envelope-flap"></div>
                    
                    <!-- Envelope bottom portion -->
                    <div class="envelope-bottom"></div>
                    
                    <!-- Side flaps (fully sealed) -->
                    <div class="envelope-side-flap-left"></div>
                    <div class="envelope-side-flap-right"></div>
                    
                    <!-- NEW: Letter inside envelope -->
                    <div class="envelope-letter">
                        <div class="envelope-inside-message">
                            <h3>Selamlaaar :)</h3>
                            <p>Çook uzaklardan gelen bir prenses varmış. Bu prensens, o kadar iyi kalpli, o kadar yardımsever ve aynı zamanda çalışkanmış ki sanki masal kitaplarından gelmiş gibi imiş. Bir gün Microsoft tarafından topluma olan iyilikleri için ufak bir teşekkür olarak ona bir taç hediye edilmiş. Daha sonra bu taç onu tıpkı kendine benzeyen birisiyle tanışmasına vesile olmuş :) …

Hikayenin devamını öğrenmek için telefon doğrulaması gerekiyor! Lütfen aşağıdaki e posta adresini kıllanarak numaranızı destek ekibimize iletin :))</p>
                            <div class="signature">Golden Library Team</div>
                        </div>
                    </div>
                    
                    <!-- NEW: Outside message (visible when envelope is closed) -->
                    <div class="envelope-outside-message">
                        <span>Click to open</span>
                    </div>
                </div>
                
            </div>
        </div>
        
        <!-- Right column with Achievement Icons -->
        <div class="content-column icons-column">
            <!-- Achievement Icons Container -->
            <div class="achievement-container">
                <div class="achievement-icon">
                    <img src="~/img/typescript.svg" alt="TypeScript" class="tech-icon purple-iwd">
                    <div class="tooltip">TypeScript</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/redis.svg" alt="Redis" class="tech-icon green-iwd">
                    <div class="tooltip">Redis</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/azure.svg" alt="Microsoft Azure" class="tech-icon yellow-iwd">
                    <div class="tooltip">Microsoft Azure</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/javascript.svg" alt="JavaScript" class="tech-icon pink-iwd">
                    <div class="tooltip">JavaScript</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/openai.png" alt="OpenAI" class="tech-icon green-iwd">
                    <div class="tooltip">OpenAI</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/React.svg" alt="React" class="tech-icon purple-iwd">
                    <div class="tooltip">New Relic</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/dotnet.png" alt=".NET" class="tech-icon pink-iwd">
                    <div class="tooltip">.NET</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/python.svg" alt="AI Tech" class="tech-icon yellow-iwd">
                    <div class="tooltip">AI Technology</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Microsoft MVP Buttercup -->
    <div class="mvp-buttercup">
        <div class="mvp-container">
            <span class="mvp-text">Microsoft MVP</span>
            <span class="buttercup">
                <img src="~/img/buttercup.gif" alt="Buttercup" class="buttercup-gif" />
            </span>
        </div>
        <span class="medal">🏅</span>
    </div>

    <!-- Floating elements container -->
    <div id="floating-elements-container"></div>
    
    <!-- Falling flowers container -->
    <div id="falling-flowers-container"></div>
</div>

<script>
    // Document ready function
    document.addEventListener('DOMContentLoaded', function() {
        // Create floating elements
        const container = document.getElementById('floating-elements-container');
        const symbols = ['🌟', '📚', '❤️', '🌹', '🏆','<img src="/img/MVPLogo.png" class="floating-image" alt="MVP Logo" style="width: 30px; height: 30px;" />'];
        const iwdColors = ['#7b1fa2', '#FF69B4', '#4CAF50', '#FFC107']; // Purple, Pink, Green, Yellow IWD colors
        
        // Create random floating elements
        for (let i = 0; i < 15; i++) {
            createFloatingElement(container, 
                                symbols[Math.floor(Math.random() * symbols.length)],
                                iwdColors[i % 4]);
        }
        
        // Create falling flowers
        createFallingFlowers();
        
        // Add hover effects to achievement icons
        addIconInteractions();
        
        // Start the MVP buttercup flying animation
        initMVPButtercup();
        
        // Add subtle 3D envelope animation
        animateEnvelope();
        
        // Initialize envelope interaction
        initEnvelopeInteraction();
    });
    
    function createFloatingElement(container, content, color) {
        const element = document.createElement('div');
        element.className = 'floating-element symbol';
        
        // Check if content contains HTML tag
        if (content.includes('<img')) {
            element.innerHTML = content;
        } else {
            element.textContent = content;
            element.style.color = color;
        }
        
        // Random position
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        element.style.left = posX + 'vw';
        element.style.top = posY + 'vh';
        
        // Random animation duration and delay
        const duration = 15 + Math.random() * 20;
        const delay = Math.random() * 5;
        element.style.animation = `float ${duration}s ease-in-out ${delay}s infinite`;
        
        container.appendChild(element);
    }
    
    function createFallingFlowers() {
        const container = document.getElementById('falling-flowers-container');
        const flowerEmojis = ['🌸', '🌷', '🌹', '🌻', '🌺', '💐', '🪷', '🌼'];
        const iwdColors = ['#7b1fa2', '#FF69B4', '#4CAF50', '#FFC107']; // Purple, Pink, Green, Yellow IWD colors
        
        // Create falling flowers
        for (let i = 0; i < 30; i++) {
            setTimeout(() => {
                const flower = document.createElement('div');
                flower.className = 'falling-flower';
                
                // Random flower and color
                flower.textContent = flowerEmojis[Math.floor(Math.random() * flowerEmojis.length)];
                flower.style.color = iwdColors[i % 4];
                
                // Random size
                const size = 15 + Math.random() * 15;
                flower.style.fontSize = `${size}px`;
                
                // Random position
                const startPosX = Math.random() * 100;
                flower.style.left = `${startPosX}vw`;
                flower.style.top = '-20px';
                
                // Random animation duration
                const duration = 8 + Math.random() * 10;
                flower.style.animationDuration = `${duration}s`;
                
                container.appendChild(flower);
                
                // Remove after animation completes
                setTimeout(() => {
                    flower.remove();
                }, duration * 1000);
                
            }, i * 300); // Stagger the creation
        }
        
        // Continue creating flowers periodically
        setInterval(() => {
            if (document.visibilityState === 'visible') {
                const flower = document.createElement('div');
                flower.className = 'falling-flower';
                
                const randomIndex = Math.floor(Math.random() * flowerEmojis.length);
                flower.textContent = flowerEmojis[randomIndex];
                flower.style.color = iwdColors[Math.floor(Math.random() * iwdColors.length)];
                
                const size = 15 + Math.random() * 15;
                flower.style.fontSize = `${size}px`;
                
                const startPosX = Math.random() * 100;
                flower.style.left = `${startPosX}vw`;
                flower.style.top = '-20px';
                
                const duration = 8 + Math.random() * 10;
                flower.style.animationDuration = `${duration}s`;
                
                container.appendChild(flower);
                
                setTimeout(() => {
                    flower.remove();
                }, duration * 1000);
            }
        }, 800);
    }
    
    function addIconInteractions() {
        const icons = document.querySelectorAll('.achievement-icon');
        
        icons.forEach(icon => {
            icon.addEventListener('click', () => {
                // Create a "pop" animation effect
                icon.style.transform = 'scale(1.2)';
                setTimeout(() => {
                    icon.style.transform = '';
                }, 300);
            });
        });
    }
    
    function initMVPButtercup() {
        const mvpButtercup = document.querySelector('.mvp-buttercup');
        
        // Set initial delay
        setTimeout(() => {
            // Start the animation
            animateMVPButtercup();
            
            // Repeat the animation periodically
            setInterval(animateMVPButtercup, 20000); // Fly every 20 seconds
        }, 3000); // Initial delay of 3 seconds
        
        function animateMVPButtercup() {
            // Reset the animation by cloning and replacing the element
            const parent = mvpButtercup.parentNode;
            const mvpClone = mvpButtercup.cloneNode(true);
            parent.replaceChild(mvpClone, mvpButtercup);
            
            // Add a click handler to make the buttercup "sparkle" when clicked
            mvpClone.addEventListener('click', function() {
                const sparkle = document.createElement('div');
                sparkle.innerHTML = '✨';
                sparkle.style.position = 'absolute';
                sparkle.style.left = '50%';
                sparkle.style.top = '50%';
                sparkle.style.transform = 'translate(-50%, -50%)';
                sparkle.style.fontSize = '40px';
                sparkle.style.zIndex = '20';
                sparkle.style.pointerEvents = 'none';
                sparkle.style.animation = 'fadeOut 1s forwards';
                
                this.appendChild(sparkle);
                
                setTimeout(() => {
                    sparkle.remove();
                }, 1000);
            });
        }
    }
    
    // Function to add subtle 3D animation to the envelope
    function animateEnvelope() {
        const envelope = document.getElementById('valentine-envelope');
        
        // Add a subtle hover effect
        envelope.addEventListener('mousemove', function(e) {
            const rect = this.getBoundingClientRect();
            const x = e.clientX - rect.left; // x position within the element
            const y = e.clientY - rect.top;  // y position within the element
            
            // Calculate rotation based on mouse position
            const xRotation = ((y / rect.height) - 0.5) * 5; // Max 5 degrees
            const yRotation = ((x / rect.width) - 0.5) * -5; // Max 5 degrees
            
            // Apply the rotation
            this.style.transform = `perspective(1000px) rotateX(${xRotation}deg) rotateY(${yRotation}deg)`;
        });
        
        // Reset when mouse leaves
        envelope.addEventListener('mouseleave', function() {
            this.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg)';
        });
    }

    // Function to add envelope opening/closing interaction
    function initEnvelopeInteraction() {
        const envelope = document.getElementById('valentine-envelope');
        
        // Add click event listener to toggle envelope open/close
        envelope.addEventListener('click', function() {
            this.classList.toggle('open');
            
            // Optional: Add sound effect for envelope opening/closing
            // const sound = new Audio('/sounds/paper-sound.mp3');
            // sound.volume = 0.5;
            // sound.play();
        });
    }
</script>

<style>
/* New Grid Layout Styles */
.content-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    width: 100%;
    margin-bottom: 1rem;
    min-height: 400px;
}

.content-column {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.envelope-column {
    display: flex;
    align-items: center;
    justify-content: center;
}

.icons-column {
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Responsive adjustments for the grid */
@@media (max-width: 992px) {
    .content-grid {
        grid-template-columns: 1fr;
    }
}

/* Existing MVP Buttercup styles */
.mvp-buttercup {
    position: fixed;
    z-index: 10;
    display: flex;
    align-items: center;
    gap: 5px;
    user-select: none;
    cursor: pointer;
    animation: flyAcross 15s linear infinite;
    opacity: 0;
    font-size: 30px;
    filter: drop-shadow(0 3px 5px rgba(0,0,0,0.2));
    transform: translateZ(0);
}

.mvp-buttercup .mvp-container {
    position: relative;
    display: inline-block;
}

.mvp-buttercup .mvp-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: linear-gradient(90deg, #7b1fa2, #FF69B4, #4CAF50, #FFC107);
    background-size: 300% 100%;
    animation: gradientBG 5s ease infinite;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: bold;
    font-size: 22px;
    text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    padding: 3px;
    border-radius: 20px;
    z-index: 1;
}

.mvp-buttercup .buttercup {
    position: relative;
    display: inline-block;
    animation: buttercupFlap 0.5s ease-in-out infinite alternate;
    transform-origin: center;
    z-index: 2;
}

.mvp-buttercup .buttercup-gif {
    width: 120px;
    height: 120px;
}

.mvp-buttercup .medal {
    display: inline-block;
    position: relative;
    animation: medalSpin 3s linear infinite;
    transform-origin: center;
    font-size: 20px;
}

/* Styling for achievement icons with SVG images */
    .achievement-container {
        position: relative;
        top: -100px; /* Negatif değer yukarı taşır */
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        margin: 2rem 0;
        animation: fadeIn 2.5s ease-out;
        z-index: 2; /* Diğer elementlerin üzerinde görünmesi için */
    }

.achievement-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.9);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    position: relative;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.3s ease;
}

.achievement-icon::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(123, 31, 162, 0.3), rgba(255, 105, 180, 0.3), rgba(76, 175, 80, 0.3), rgba(255, 193, 7, 0.3));
    background-size: 400% 400%;
    animation: gradientBG 5s ease infinite;
    border-radius: 50%;
    z-index: 1;
}

.achievement-icon:hover {
    transform: translateY(-5px);
}

.achievement-icon .tooltip {
    position: absolute;
    bottom: -40px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(123, 31, 162, 0.9);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 12px;
    opacity: 0;
    transition: opacity 0.3s, bottom 0.3s;
    pointer-events: none;
    width: max-content;
    max-width: 150px;
    z-index: 10;
}

.achievement-icon:hover .tooltip {
    opacity: 1;
    bottom: -45px;
}

.achievement-icon .tech-icon {
    width: 60px;
    height: 60px;
    z-index: 2;
    position: relative;
}

.achievement-icon:nth-child(odd) {
    animation: iconFloat 3s ease-in-out infinite;
}

.achievement-icon:nth-child(even) {
    animation: iconFloat 3.5s ease-in-out 0.5s infinite;
}

/* CSS keyframes animations */
@@keyframes flyAcross {
    0% {
        left: -100px;
        top: 30%;
        opacity: 0;
        transform: translateY(0) scale(0.8) rotate(5deg);
    }
    5% {
        opacity: 1;
    }
    25% {
        left: 30%;
        top: 15%;
        transform: translateY(-20px) scale(1) rotate(-5deg);
    }
    50% {
        left: 50%;
        top: 40%;
        transform: translateY(20px) scale(1.2) rotate(5deg);
    }
    75% {
        left: 70%;
        top: 20%;
        transform: translateY(-10px) scale(1) rotate(-5deg);
    }
    95% {
        opacity: 1;
    }
    100% {
        left: calc(100% + 100px);
        top: 30%;
        opacity: 0;
        transform: translateY(0) scale(0.8) rotate(5deg);
    }
}

@@keyframes buttercupFlap {
    0% {
        transform: rotateY(0) translateY(0);
    }
    100% {
        transform: rotateY(30deg) translateY(-5px);
    }
}

@@keyframes medalSpin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

@@keyframes fadeOut {
    0% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
    100% { opacity: 0; transform: translate(-50%, -50%) scale(2); }
}

@@keyframes iconFloat {
    0% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-8px);
    }
    100% {
        transform: translateY(0);
    }
}

/* Add gradient background animation */
@@keyframes gradientBG {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}
</style>