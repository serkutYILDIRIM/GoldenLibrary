@{
    ViewData["Title"] = "International Women's Day";
}

<link rel="stylesheet" href="~/css/womens-day.css" />
<link rel="stylesheet" href="~/css/valentine-day.css" />
<!-- Font Awesome for achievement icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

<div class="gift-container">
    <h1 class="title">Celebrating Women's Achievements</h1>
    <h2 class="subtitle">Empowerment <span class="venus-symbol">‚ôÄ</span> Equity <span class="venus-symbol">‚ôÄ</span> Excellence</h2>
    
    <div class="content-grid">
        <!-- Left column with Valentine's Day Themed Envelope -->
        <div class="content-column envelope-column">
            <div class="valentine-envelope-container">
                <!-- Heart decorations -->
                <div class="heart-decoration heart-1">‚ù§Ô∏è</div>
                <div class="heart-decoration heart-2">‚ù§Ô∏è</div>
                
                <!-- Main envelope element -->
                <div id="valentine-envelope" class="envelope">
                    <!-- Envelope flap (top part that opens) -->
                    <div class="envelope-flap"></div>
                    
                    <!-- Envelope bottom portion -->
                    <div class="envelope-bottom"></div>
                    
                    <!-- Side flaps (internal structure) -->
                    <div class="envelope-side-flap-left"></div>
                    <div class="envelope-side-flap-right"></div>
                    
                    <!-- Outside message area -->
                    <div class="envelope-outside-message">
                        <textarea placeholder="Write your Valentine's greeting here..." maxlength="250">Today we celebrate International Women's Day across the globe. This day marks a call to action for accelerating women's equality and recognizing their incredible achievements.</textarea>
                    </div>
                    
                    <!-- Letter inside envelope -->
                    <div class="envelope-letter">
                        <div class="envelope-inside-message">
                            <textarea placeholder="Write your special message inside...">Golden Library honors the extraordinary contributions women have made to literature, science, arts, and all fields of human achievement.</textarea>
                        </div>
                    </div>
                </div>
                
                <!-- Instructions for users -->
                <div class="text-center mt-3">
                    <small class="text-muted">Click the envelope to open it üíå</small>
                </div>
            </div>
        </div>
        
        <!-- Right column with Achievement Icons -->
        <div class="content-column icons-column">
            <!-- Achievement Icons Container -->
            <div class="achievement-container">
                <div class="achievement-icon">
                    <img src="~/img/typescript.svg" alt="TypeScript" class="tech-icon purple-iwd">
                    <div class="tooltip">TypeScript</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/redis.svg" alt="Redis" class="tech-icon green-iwd">
                    <div class="tooltip">Redis</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/azure.svg" alt="Microsoft Azure" class="tech-icon yellow-iwd">
                    <div class="tooltip">Microsoft Azure</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/javascript.svg" alt="JavaScript" class="tech-icon pink-iwd">
                    <div class="tooltip">JavaScript</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/openai.png" alt="OpenAI" class="tech-icon green-iwd">
                    <div class="tooltip">OpenAI</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/React.svg" alt="React" class="tech-icon purple-iwd">
                    <div class="tooltip">New Relic</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/dotnet.png" alt=".NET" class="tech-icon pink-iwd">
                    <div class="tooltip">.NET</div>
                </div>
                <div class="achievement-icon">
                    <img src="~/img/python.svg" alt="AI Tech" class="tech-icon yellow-iwd">
                    <div class="tooltip">AI Technology</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Microsoft MVP Buttercup -->
    <div class="mvp-buttercup">
        <div class="mvp-container">
            <span class="mvp-text">Microsoft MVP</span>
            <span class="buttercup">
                <img src="~/img/buttercup.gif" alt="Buttercup" class="buttercup-gif" />
            </span>
        </div>
        <span class="medal">üèÖ</span>
    </div>

    <!-- Floating elements container -->
    <div id="floating-elements-container"></div>
    
    <!-- Falling flowers container -->
    <div id="falling-flowers-container"></div>
</div>

<script>
    // Valentine Envelope Animation
    document.addEventListener('DOMContentLoaded', function() {
        const envelope = document.getElementById('valentine-envelope');
        
        // Add click event to envelope
        envelope.addEventListener('click', function() {
            this.classList.toggle('open');
        });
        
        // Create floating elements
        const container = document.getElementById('floating-elements-container');
        const symbols = ['üßùüèª‚Äç‚ôÄ', '‚ú®', 'üí™', 'üìö', '‚ù§Ô∏è', 'üîÜ', 'üåü', 'üéì', 'üèÜ', 'üèÖMS'];
        const iwdColors = ['#7b1fa2', '#FF69B4', '#4CAF50', '#FFC107']; // Purple, Pink, Green, Yellow IWD colors
        
        // Create 15 random floating elements
        for (let i = 0; i < 15; i++) {
            createFloatingElement(container, 
                                symbols[Math.floor(Math.random() * symbols.length)],
                                iwdColors[i % 4]);
        }
        
        // Create falling flowers
        createFallingFlowers();
        
        // Add hover effects to achievement icons
        addIconInteractions();
        
        // Start the MVP buttercup flying animation
        initMVPButtercup();
    });
    
    function createFloatingElement(container, content, color) {
        const element = document.createElement('div');
        element.className = 'floating-element symbol';
        element.textContent = content;
        element.style.color = color;
        
        // Random position
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        element.style.left = posX + 'vw';
        element.style.top = posY + 'vh';
        
        // Random animation duration and delay
        const duration = 15 + Math.random() * 20;
        const delay = Math.random() * 5;
        element.style.animation = `float ${duration}s ease-in-out ${delay}s infinite`;
        
        container.appendChild(element);
    }
    
    function createFallingFlowers() {
        const container = document.getElementById('falling-flowers-container');
        const flowerEmojis = ['üå∏', 'üå∑', 'üåπ', 'üåª', 'üå∫', 'üíê', 'ü™∑', 'üåº'];
        const iwdColors = ['#7b1fa2', '#FF69B4', '#4CAF50', '#FFC107']; // Purple, Pink, Green, Yellow IWD colors
        
        // Create 30 falling flowers
        for (let i = 0; i < 30; i++) {
            setTimeout(() => {
                const flower = document.createElement('div');
                flower.className = 'falling-flower';
                
                // Random flower and color
                flower.textContent = flowerEmojis[Math.floor(Math.random() * flowerEmojis.length)];
                flower.style.color = iwdColors[i % 4];
                
                // Random size
                const size = 15 + Math.random() * 15;
                flower.style.fontSize = `${size}px`;
                
                // Random position
                const startPosX = Math.random() * 100;
                flower.style.left = `${startPosX}vw`;
                flower.style.top = '-20px';
                
                // Random animation duration
                const duration = 8 + Math.random() * 10;
                flower.style.animationDuration = `${duration}s`;
                
                container.appendChild(flower);
                
                // Remove after animation completes
                setTimeout(() => {
                    flower.remove();
                }, duration * 1000);
                
            }, i * 300); // Stagger the creation
        }
        
        // Continue creating flowers periodically
        setInterval(() => {
            if (document.visibilityState === 'visible') {
                const flower = document.createElement('div');
                flower.className = 'falling-flower';
                
                const randomIndex = Math.floor(Math.random() * flowerEmojis.length);
                flower.textContent = flowerEmojis[randomIndex];
                flower.style.color = iwdColors[Math.floor(Math.random() * iwdColors.length)];
                
                const size = 15 + Math.random() * 15;
                flower.style.fontSize = `${size}px`;
                
                const startPosX = Math.random() * 100;
                flower.style.left = `${startPosX}vw`;
                flower.style.top = '-20px';
                
                const duration = 8 + Math.random() * 10;
                flower.style.animationDuration = `${duration}s`;
                
                container.appendChild(flower);
                
                setTimeout(() => {
                    flower.remove();
                }, duration * 1000);
            }
        }, 800);
    }
    
    function addIconInteractions() {
        const icons = document.querySelectorAll('.achievement-icon');
        
        icons.forEach(icon => {
            icon.addEventListener('click', () => {
                // Create a "pop" animation effect
                icon.style.transform = 'scale(1.2)';
                setTimeout(() => {
                    icon.style.transform = '';
                }, 300);
            });
        });
    }
    
    function initMVPButtercup() {
        const mvpButtercup = document.querySelector('.mvp-buttercup');
        
        // Set initial delay
        setTimeout(() => {
            // Start the animation
            animateMVPButtercup();
            
            // Repeat the animation periodically
            setInterval(animateMVPButtercup, 20000); // Fly every 20 seconds
        }, 3000); // Initial delay of 3 seconds
        
        function animateMVPButtercup() {
            // Reset the animation by cloning and replacing the element
            const parent = mvpButtercup.parentNode;
            const mvpClone = mvpButtercup.cloneNode(true);
            parent.replaceChild(mvpClone, mvpButtercup);
            
            // Add a click handler to make the buttercup "sparkle" when clicked
            mvpClone.addEventListener('click', function() {
                const sparkle = document.createElement('div');
                sparkle.innerHTML = '‚ú®';
                sparkle.style.position = 'absolute';
                sparkle.style.left = '50%';
                sparkle.style.top = '50%';
                sparkle.style.transform = 'translate(-50%, -50%)';
                sparkle.style.fontSize = '40px';
                sparkle.style.zIndex = '20';
                sparkle.style.pointerEvents = 'none';
                sparkle.style.animation = 'fadeOut 1s forwards';
                
                this.appendChild(sparkle);
                
                setTimeout(() => {
                    sparkle.remove();
                }, 1000);
            });
        }
    }
</script>

<style>
/* New Grid Layout Styles */
.content-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    width: 100%;
    margin-bottom: 1rem;
    min-height: 400px;
}

.content-column {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.envelope-column {
    display: flex;
    align-items: center;
    justify-content: center;
}

.icons-column {
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Responsive adjustments for the grid */
@@media (max-width: 992px) {
    .content-grid {
        grid-template-columns: 1fr;
    }
}

/* Existing MVP Buttercup styles */
.mvp-buttercup {
    position: fixed;
    z-index: 10;
    display: flex;
    align-items: center;
    gap: 5px;
    user-select: none;
    cursor: pointer;
    animation: flyAcross 15s linear infinite;
    opacity: 0;
    font-size: 30px;
    filter: drop-shadow(0 3px 5px rgba(0,0,0,0.2));
    transform: translateZ(0);
}

.mvp-buttercup .mvp-container {
    position: relative;
    display: inline-block;
}

.mvp-buttercup .mvp-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: linear-gradient(90deg, #7b1fa2, #FF69B4, #4CAF50, #FFC107);
    background-size: 300% 100%;
    animation: gradientBG 5s ease infinite;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: bold;
    font-size: 22px;
    text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    padding: 3px;
    border-radius: 20px;
    z-index: 1;
}

.mvp-buttercup .buttercup {
    position: relative;
    display: inline-block;
    animation: buttercupFlap 0.5s ease-in-out infinite alternate;
    transform-origin: center;
    z-index: 2;
}

.mvp-buttercup .buttercup-gif {
    width: 120px;
    height: 120px;
}

.mvp-buttercup .medal {
    display: inline-block;
    position: relative;
    animation: medalSpin 3s linear infinite;
    transform-origin: center;
    font-size: 20px;
}

/* Styling for achievement icons with SVG images */
    .achievement-container {
        position: relative;
        top: -100px; /* Negatif deƒüer yukarƒ± ta≈üƒ±r */
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        margin: 2rem 0;
        animation: fadeIn 2.5s ease-out;
        z-index: 2; /* Diƒüer elementlerin √ºzerinde g√∂r√ºnmesi i√ßin */
    }

.achievement-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.9);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    position: relative;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.3s ease;
}

.achievement-icon::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(123, 31, 162, 0.3), rgba(255, 105, 180, 0.3), rgba(76, 175, 80, 0.3), rgba(255, 193, 7, 0.3));
    background-size: 400% 400%;
    animation: gradientBG 5s ease infinite;
    border-radius: 50%;
    z-index: 1;
}

.achievement-icon:hover {
    transform: translateY(-5px);
}

.achievement-icon .tooltip {
    position: absolute;
    bottom: -40px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(123, 31, 162, 0.9);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 12px;
    opacity: 0;
    transition: opacity 0.3s, bottom 0.3s;
    pointer-events: none;
    width: max-content;
    max-width: 150px;
    z-index: 10;
}

.achievement-icon:hover .tooltip {
    opacity: 1;
    bottom: -45px;
}

.achievement-icon .tech-icon {
    width: 60px;
    height: 60px;
    z-index: 2;
    position: relative;
}

.achievement-icon:nth-child(odd) {
    animation: iconFloat 3s ease-in-out infinite;
}

.achievement-icon:nth-child(even) {
    animation: iconFloat 3.5s ease-in-out 0.5s infinite;
}

/* CSS keyframes animations */
@@keyframes flyAcross {
    0% {
        left: -100px;
        top: 30%;
        opacity: 0;
        transform: translateY(0) scale(0.8) rotate(5deg);
    }
    5% {
        opacity: 1;
    }
    25% {
        left: 30%;
        top: 15%;
        transform: translateY(-20px) scale(1) rotate(-5deg);
    }
    50% {
        left: 50%;
        top: 40%;
        transform: translateY(20px) scale(1.2) rotate(5deg);
    }
    75% {
        left: 70%;
        top: 20%;
        transform: translateY(-10px) scale(1) rotate(-5deg);
    }
    95% {
        opacity: 1;
    }
    100% {
        left: calc(100% + 100px);
        top: 30%;
        opacity: 0;
        transform: translateY(0) scale(0.8) rotate(5deg);
    }
}

@@keyframes buttercupFlap {
    0% {
        transform: rotateY(0) translateY(0);
    }
    100% {
        transform: rotateY(30deg) translateY(-5px);
    }
}

@@keyframes medalSpin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

@@keyframes fadeOut {
    0% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
    100% { opacity: 0; transform: translate(-50%, -50%) scale(2); }
}

@@keyframes iconFloat {
    0% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-8px);
    }
    100% {
        transform: translateY(0);
    }
}
</style>